/*
M1_PolicyTemplatesProvisioning

Testing DefaultApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package M1_PolicyTemplatesProvisioning

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_M1_PolicyTemplatesProvisioning_DefaultApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test DefaultApiService CreatePolicyTemplate", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var provisioningSessionId string

        resp, httpRes, err := apiClient.DefaultApi.CreatePolicyTemplate(context.Background(), provisioningSessionId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService DestroyPolicyTemplate", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var provisioningSessionId string
        var policyTemplateId string

        resp, httpRes, err := apiClient.DefaultApi.DestroyPolicyTemplate(context.Background(), provisioningSessionId, policyTemplateId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService PatchPolicyTemplate", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var provisioningSessionId string
        var policyTemplateId string

        resp, httpRes, err := apiClient.DefaultApi.PatchPolicyTemplate(context.Background(), provisioningSessionId, policyTemplateId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService RetrievePolicyTemplate", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var provisioningSessionId string
        var policyTemplateId string

        resp, httpRes, err := apiClient.DefaultApi.RetrievePolicyTemplate(context.Background(), provisioningSessionId, policyTemplateId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService UpdatePolicyTemplate", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var provisioningSessionId string
        var policyTemplateId string

        resp, httpRes, err := apiClient.DefaultApi.UpdatePolicyTemplate(context.Background(), provisioningSessionId, policyTemplateId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
