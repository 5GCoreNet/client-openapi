/*
MDA NRM

OAS 3.0.1 specification of the MDA NRM Â© 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 17.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_MdaNrm

import (
	"encoding/json"
)

// GeoArea struct for GeoArea
type GeoArea struct {
	Coordinates []Coordinate `json:"coordinates,omitempty"`
	Altitude *float32 `json:"altitude,omitempty"`
}

// NewGeoArea instantiates a new GeoArea object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGeoArea() *GeoArea {
	this := GeoArea{}
	return &this
}

// NewGeoAreaWithDefaults instantiates a new GeoArea object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGeoAreaWithDefaults() *GeoArea {
	this := GeoArea{}
	return &this
}

// GetCoordinates returns the Coordinates field value if set, zero value otherwise.
func (o *GeoArea) GetCoordinates() []Coordinate {
	if o == nil || isNil(o.Coordinates) {
		var ret []Coordinate
		return ret
	}
	return o.Coordinates
}

// GetCoordinatesOk returns a tuple with the Coordinates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeoArea) GetCoordinatesOk() ([]Coordinate, bool) {
	if o == nil || isNil(o.Coordinates) {
    return nil, false
	}
	return o.Coordinates, true
}

// HasCoordinates returns a boolean if a field has been set.
func (o *GeoArea) HasCoordinates() bool {
	if o != nil && !isNil(o.Coordinates) {
		return true
	}

	return false
}

// SetCoordinates gets a reference to the given []Coordinate and assigns it to the Coordinates field.
func (o *GeoArea) SetCoordinates(v []Coordinate) {
	o.Coordinates = v
}

// GetAltitude returns the Altitude field value if set, zero value otherwise.
func (o *GeoArea) GetAltitude() float32 {
	if o == nil || isNil(o.Altitude) {
		var ret float32
		return ret
	}
	return *o.Altitude
}

// GetAltitudeOk returns a tuple with the Altitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeoArea) GetAltitudeOk() (*float32, bool) {
	if o == nil || isNil(o.Altitude) {
    return nil, false
	}
	return o.Altitude, true
}

// HasAltitude returns a boolean if a field has been set.
func (o *GeoArea) HasAltitude() bool {
	if o != nil && !isNil(o.Altitude) {
		return true
	}

	return false
}

// SetAltitude gets a reference to the given float32 and assigns it to the Altitude field.
func (o *GeoArea) SetAltitude(v float32) {
	o.Altitude = &v
}

func (o GeoArea) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Coordinates) {
		toSerialize["coordinates"] = o.Coordinates
	}
	if !isNil(o.Altitude) {
		toSerialize["altitude"] = o.Altitude
	}
	return json.Marshal(toSerialize)
}

type NullableGeoArea struct {
	value *GeoArea
	isSet bool
}

func (v NullableGeoArea) Get() *GeoArea {
	return v.value
}

func (v *NullableGeoArea) Set(val *GeoArea) {
	v.value = val
	v.isSet = true
}

func (v NullableGeoArea) IsSet() bool {
	return v.isSet
}

func (v *NullableGeoArea) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeoArea(val *GeoArea) *NullableGeoArea {
	return &NullableGeoArea{value: val, isSet: true}
}

func (v NullableGeoArea) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeoArea) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


