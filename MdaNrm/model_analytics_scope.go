/*
MDA NRM

OAS 3.0.1 specification of the MDA NRM Â© 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 17.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package MdaNrm

import (
	"encoding/json"
	"fmt"
)

// AnalyticsScope - struct for AnalyticsScope
type AnalyticsScope struct {
	AnalyticsScopeOneOf *AnalyticsScopeOneOf
	AnalyticsScopeOneOf1 *AnalyticsScopeOneOf1
}

// AnalyticsScopeOneOfAsAnalyticsScope is a convenience function that returns AnalyticsScopeOneOf wrapped in AnalyticsScope
func AnalyticsScopeOneOfAsAnalyticsScope(v *AnalyticsScopeOneOf) AnalyticsScope {
	return AnalyticsScope{
		AnalyticsScopeOneOf: v,
	}
}

// AnalyticsScopeOneOf1AsAnalyticsScope is a convenience function that returns AnalyticsScopeOneOf1 wrapped in AnalyticsScope
func AnalyticsScopeOneOf1AsAnalyticsScope(v *AnalyticsScopeOneOf1) AnalyticsScope {
	return AnalyticsScope{
		AnalyticsScopeOneOf1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AnalyticsScope) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AnalyticsScopeOneOf
	err = newStrictDecoder(data).Decode(&dst.AnalyticsScopeOneOf)
	if err == nil {
		jsonAnalyticsScopeOneOf, _ := json.Marshal(dst.AnalyticsScopeOneOf)
		if string(jsonAnalyticsScopeOneOf) == "{}" { // empty struct
			dst.AnalyticsScopeOneOf = nil
		} else {
			match++
		}
	} else {
		dst.AnalyticsScopeOneOf = nil
	}

	// try to unmarshal data into AnalyticsScopeOneOf1
	err = newStrictDecoder(data).Decode(&dst.AnalyticsScopeOneOf1)
	if err == nil {
		jsonAnalyticsScopeOneOf1, _ := json.Marshal(dst.AnalyticsScopeOneOf1)
		if string(jsonAnalyticsScopeOneOf1) == "{}" { // empty struct
			dst.AnalyticsScopeOneOf1 = nil
		} else {
			match++
		}
	} else {
		dst.AnalyticsScopeOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AnalyticsScopeOneOf = nil
		dst.AnalyticsScopeOneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AnalyticsScope)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AnalyticsScope)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AnalyticsScope) MarshalJSON() ([]byte, error) {
	if src.AnalyticsScopeOneOf != nil {
		return json.Marshal(&src.AnalyticsScopeOneOf)
	}

	if src.AnalyticsScopeOneOf1 != nil {
		return json.Marshal(&src.AnalyticsScopeOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AnalyticsScope) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AnalyticsScopeOneOf != nil {
		return obj.AnalyticsScopeOneOf
	}

	if obj.AnalyticsScopeOneOf1 != nil {
		return obj.AnalyticsScopeOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableAnalyticsScope struct {
	value *AnalyticsScope
	isSet bool
}

func (v NullableAnalyticsScope) Get() *AnalyticsScope {
	return v.value
}

func (v *NullableAnalyticsScope) Set(val *AnalyticsScope) {
	v.value = val
	v.isSet = true
}

func (v NullableAnalyticsScope) IsSet() bool {
	return v.isSet
}

func (v *NullableAnalyticsScope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnalyticsScope(val *AnalyticsScope) *NullableAnalyticsScope {
	return &NullableAnalyticsScope{value: val, isSet: true}
}

func (v NullableAnalyticsScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnalyticsScope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


