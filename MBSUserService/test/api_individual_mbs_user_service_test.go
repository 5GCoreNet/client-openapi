/*
3gpp-mbs-us

Testing IndividualMBSUserServiceApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package MBSUserService

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_MBSUserService_IndividualMBSUserServiceApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test IndividualMBSUserServiceApiService DeleteIndivMBSUserService", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var mbsUserServId string

        resp, httpRes, err := apiClient.IndividualMBSUserServiceApi.DeleteIndivMBSUserService(context.Background(), mbsUserServId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test IndividualMBSUserServiceApiService ModifyIndivMBSUserService", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var mbsUserServId string

        resp, httpRes, err := apiClient.IndividualMBSUserServiceApi.ModifyIndivMBSUserService(context.Background(), mbsUserServId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test IndividualMBSUserServiceApiService RetrieveIndivMBSUserService", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var mbsUserServId string

        resp, httpRes, err := apiClient.IndividualMBSUserServiceApi.RetrieveIndivMBSUserService(context.Background(), mbsUserServId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test IndividualMBSUserServiceApiService UpdateIndivMBSUserService", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var mbsUserServId string

        resp, httpRes, err := apiClient.IndividualMBSUserServiceApi.UpdateIndivMBSUserService(context.Background(), mbsUserServId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
