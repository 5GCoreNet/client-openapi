/*
Provisioning MnS

OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 17.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ProvMnS

import (
	"encoding/json"
)

// TraceJobAttr abstract class used as a container of all TraceJob attributes
type TraceJobAttr struct {
	JobType *JobTypeType `json:"jobType,omitempty"`
	ListOfInterfaces *ListOfInterfacesType `json:"listOfInterfaces,omitempty"`
	// The Network Element types where Trace Session activation is needed. See 3GPP TS 32.422 clause 5.4 for additional details.
	ListOfNETypes []string `json:"listOfNETypes,omitempty"`
	PLMNTarget *PLMNTargetType `json:"pLMNTarget,omitempty"`
	TraceReportingConsumerUri *string `json:"traceReportingConsumerUri,omitempty"`
	TraceCollectionEntityIPAddress *IpAddr `json:"traceCollectionEntityIPAddress,omitempty"`
	TraceDepth *TraceDepthType `json:"traceDepth,omitempty"`
	TraceReference *TraceReferenceType `json:"traceReference,omitempty"`
	TraceRecordingSessionReference *string `json:"traceRecordingSessionReference,omitempty"`
	JobId *string `json:"jobId,omitempty"`
	TraceReportingFormat *TraceReportingFormatType `json:"traceReportingFormat,omitempty"`
	TraceTarget *TraceTargetType `json:"traceTarget,omitempty"`
	TriggeringEvents *TriggeringEventsType `json:"triggeringEvents,omitempty"`
	AnonymizationOfMDTData *AnonymizationOfMDTDataType `json:"anonymizationOfMDTData,omitempty"`
	AreaConfigurationForNeighCell *AreaConfig `json:"areaConfigurationForNeighCell,omitempty"`
	AreaScope []AreaScope `json:"areaScope,omitempty"`
	// Determines whether beam level measurements shall be included in case of immediate MDT M1 measurement in NR. For additional details see 3GPP TS 32.422 clause 5.10.40.
	BeamLevelMeasurement *bool `json:"beamLevelMeasurement,omitempty"`
	CollectionPeriodRRMLTE *CollectionPeriodRRMLTEType `json:"collectionPeriodRRMLTE,omitempty"`
	CollectionPeriodM6LTE *CollectionPeriodM6LTEType `json:"collectionPeriodM6LTE,omitempty"`
	// See details in 3GPP TS 32.422 clause 5.10.33.
	CollectionPeriodM7LTE *int32 `json:"collectionPeriodM7LTE,omitempty"`
	CollectionPeriodRRMUMTS *CollectionPeriodRRMUMTSType `json:"collectionPeriodRRMUMTS,omitempty"`
	CollectionPeriodRRMNR *CollectionPeriodRRMNRType `json:"collectionPeriodRRMNR,omitempty"`
	CollectionPeriodM6NR *CollectionPeriodM6NRType `json:"collectionPeriodM6NR,omitempty"`
	// See details in 3GPP TS 32.422 clause 5.10.35.
	CollectionPeriodM7NR *int32 `json:"collectionPeriodM7NR,omitempty"`
	EventListForEventTriggeredMeasurement *EventListForEventTriggeredMeasurementType `json:"eventListForEventTriggeredMeasurement,omitempty"`
	EventThreshold *EventThresholdType `json:"eventThreshold,omitempty"`
	ListOfMeasurements *ListOfMeasurementsType `json:"listOfMeasurements,omitempty"`
	LoggingDuration *LoggingDurationType `json:"loggingDuration,omitempty"`
	LoggingInterval *LoggingIntervalType `json:"loggingInterval,omitempty"`
	EventThresholdL1 *EventThresholdL1Type `json:"eventThresholdL1,omitempty"`
	// See details in 3GPP TS 32.422 clause 5.10.Y.
	HysteresisL1 *int32 `json:"hysteresisL1,omitempty"`
	TimeToTriggerL1 *TimeToTriggerL1Type `json:"timeToTriggerL1,omitempty"`
	MBSFNAreaList []MbsfnArea `json:"mBSFNAreaList,omitempty"`
	MeasurementPeriodLTE *MeasurementPeriodLTEType `json:"measurementPeriodLTE,omitempty"`
	MeasurementPeriodUMTS *MeasurementPeriodUMTSType `json:"measurementPeriodUMTS,omitempty"`
	MeasurementQuantity *MeasurementQuantityType `json:"measurementQuantity,omitempty"`
	// See details in 3GPP TS 32.422 clause 5.10.A.
	EventThresholdUphUMTS *int32 `json:"eventThresholdUphUMTS,omitempty"`
	// See details in 3GPP TS 32.422 clause 5.10.24.
	PLMNList []PLMNListTypeInner `json:"pLMNList,omitempty"`
	PositioningMethod *PositioningMethodType `json:"positioningMethod,omitempty"`
	ReportAmount *ReportAmountType `json:"reportAmount,omitempty"`
	// See details in 3GPP TS 32.422 clause 5.10.4.
	ReportingTrigger []string `json:"reportingTrigger,omitempty"`
	ReportInterval *ReportIntervalType `json:"reportInterval,omitempty"`
	ReportType *ReportTypeType `json:"reportType,omitempty"`
	// See details in 3GPP TS 32.422 clause 5.10.29.
	SensorInformation []string `json:"sensorInformation,omitempty"`
	// See details in 3GPP TS 32.422 clause 5.10.11. Only TCE Id value may be sent over the air to the UE being configured for Logged MDT.
	TraceCollectionEntityId *int32 `json:"traceCollectionEntityId,omitempty"`
}

// NewTraceJobAttr instantiates a new TraceJobAttr object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTraceJobAttr() *TraceJobAttr {
	this := TraceJobAttr{}
	return &this
}

// NewTraceJobAttrWithDefaults instantiates a new TraceJobAttr object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTraceJobAttrWithDefaults() *TraceJobAttr {
	this := TraceJobAttr{}
	return &this
}

// GetJobType returns the JobType field value if set, zero value otherwise.
func (o *TraceJobAttr) GetJobType() JobTypeType {
	if o == nil || isNil(o.JobType) {
		var ret JobTypeType
		return ret
	}
	return *o.JobType
}

// GetJobTypeOk returns a tuple with the JobType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceJobAttr) GetJobTypeOk() (*JobTypeType, bool) {
	if o == nil || isNil(o.JobType) {
    return nil, false
	}
	return o.JobType, true
}

// HasJobType returns a boolean if a field has been set.
func (o *TraceJobAttr) HasJobType() bool {
	if o != nil && !isNil(o.JobType) {
		return true
	}

	return false
}

// SetJobType gets a reference to the given JobTypeType and assigns it to the JobType field.
func (o *TraceJobAttr) SetJobType(v JobTypeType) {
	o.JobType = &v
}

// GetListOfInterfaces returns the ListOfInterfaces field value if set, zero value otherwise.
func (o *TraceJobAttr) GetListOfInterfaces() ListOfInterfacesType {
	if o == nil || isNil(o.ListOfInterfaces) {
		var ret ListOfInterfacesType
		return ret
	}
	return *o.ListOfInterfaces
}

// GetListOfInterfacesOk returns a tuple with the ListOfInterfaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceJobAttr) GetListOfInterfacesOk() (*ListOfInterfacesType, bool) {
	if o == nil || isNil(o.ListOfInterfaces) {
    return nil, false
	}
	return o.ListOfInterfaces, true
}

// HasListOfInterfaces returns a boolean if a field has been set.
func (o *TraceJobAttr) HasListOfInterfaces() bool {
	if o != nil && !isNil(o.ListOfInterfaces) {
		return true
	}

	return false
}

// SetListOfInterfaces gets a reference to the given ListOfInterfacesType and assigns it to the ListOfInterfaces field.
func (o *TraceJobAttr) SetListOfInterfaces(v ListOfInterfacesType) {
	o.ListOfInterfaces = &v
}

// GetListOfNETypes returns the ListOfNETypes field value if set, zero value otherwise.
func (o *TraceJobAttr) GetListOfNETypes() []string {
	if o == nil || isNil(o.ListOfNETypes) {
		var ret []string
		return ret
	}
	return o.ListOfNETypes
}

// GetListOfNETypesOk returns a tuple with the ListOfNETypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceJobAttr) GetListOfNETypesOk() ([]string, bool) {
	if o == nil || isNil(o.ListOfNETypes) {
    return nil, false
	}
	return o.ListOfNETypes, true
}

// HasListOfNETypes returns a boolean if a field has been set.
func (o *TraceJobAttr) HasListOfNETypes() bool {
	if o != nil && !isNil(o.ListOfNETypes) {
		return true
	}

	return false
}

// SetListOfNETypes gets a reference to the given []string and assigns it to the ListOfNETypes field.
func (o *TraceJobAttr) SetListOfNETypes(v []string) {
	o.ListOfNETypes = v
}

// GetPLMNTarget returns the PLMNTarget field value if set, zero value otherwise.
func (o *TraceJobAttr) GetPLMNTarget() PLMNTargetType {
	if o == nil || isNil(o.PLMNTarget) {
		var ret PLMNTargetType
		return ret
	}
	return *o.PLMNTarget
}

// GetPLMNTargetOk returns a tuple with the PLMNTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceJobAttr) GetPLMNTargetOk() (*PLMNTargetType, bool) {
	if o == nil || isNil(o.PLMNTarget) {
    return nil, false
	}
	return o.PLMNTarget, true
}

// HasPLMNTarget returns a boolean if a field has been set.
func (o *TraceJobAttr) HasPLMNTarget() bool {
	if o != nil && !isNil(o.PLMNTarget) {
		return true
	}

	return false
}

// SetPLMNTarget gets a reference to the given PLMNTargetType and assigns it to the PLMNTarget field.
func (o *TraceJobAttr) SetPLMNTarget(v PLMNTargetType) {
	o.PLMNTarget = &v
}

// GetTraceReportingConsumerUri returns the TraceReportingConsumerUri field value if set, zero value otherwise.
func (o *TraceJobAttr) GetTraceReportingConsumerUri() string {
	if o == nil || isNil(o.TraceReportingConsumerUri) {
		var ret string
		return ret
	}
	return *o.TraceReportingConsumerUri
}

// GetTraceReportingConsumerUriOk returns a tuple with the TraceReportingConsumerUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceJobAttr) GetTraceReportingConsumerUriOk() (*string, bool) {
	if o == nil || isNil(o.TraceReportingConsumerUri) {
    return nil, false
	}
	return o.TraceReportingConsumerUri, true
}

// HasTraceReportingConsumerUri returns a boolean if a field has been set.
func (o *TraceJobAttr) HasTraceReportingConsumerUri() bool {
	if o != nil && !isNil(o.TraceReportingConsumerUri) {
		return true
	}

	return false
}

// SetTraceReportingConsumerUri gets a reference to the given string and assigns it to the TraceReportingConsumerUri field.
func (o *TraceJobAttr) SetTraceReportingConsumerUri(v string) {
	o.TraceReportingConsumerUri = &v
}

// GetTraceCollectionEntityIPAddress returns the TraceCollectionEntityIPAddress field value if set, zero value otherwise.
func (o *TraceJobAttr) GetTraceCollectionEntityIPAddress() IpAddr {
	if o == nil || isNil(o.TraceCollectionEntityIPAddress) {
		var ret IpAddr
		return ret
	}
	return *o.TraceCollectionEntityIPAddress
}

// GetTraceCollectionEntityIPAddressOk returns a tuple with the TraceCollectionEntityIPAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceJobAttr) GetTraceCollectionEntityIPAddressOk() (*IpAddr, bool) {
	if o == nil || isNil(o.TraceCollectionEntityIPAddress) {
    return nil, false
	}
	return o.TraceCollectionEntityIPAddress, true
}

// HasTraceCollectionEntityIPAddress returns a boolean if a field has been set.
func (o *TraceJobAttr) HasTraceCollectionEntityIPAddress() bool {
	if o != nil && !isNil(o.TraceCollectionEntityIPAddress) {
		return true
	}

	return false
}

// SetTraceCollectionEntityIPAddress gets a reference to the given IpAddr and assigns it to the TraceCollectionEntityIPAddress field.
func (o *TraceJobAttr) SetTraceCollectionEntityIPAddress(v IpAddr) {
	o.TraceCollectionEntityIPAddress = &v
}

// GetTraceDepth returns the TraceDepth field value if set, zero value otherwise.
func (o *TraceJobAttr) GetTraceDepth() TraceDepthType {
	if o == nil || isNil(o.TraceDepth) {
		var ret TraceDepthType
		return ret
	}
	return *o.TraceDepth
}

// GetTraceDepthOk returns a tuple with the TraceDepth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceJobAttr) GetTraceDepthOk() (*TraceDepthType, bool) {
	if o == nil || isNil(o.TraceDepth) {
    return nil, false
	}
	return o.TraceDepth, true
}

// HasTraceDepth returns a boolean if a field has been set.
func (o *TraceJobAttr) HasTraceDepth() bool {
	if o != nil && !isNil(o.TraceDepth) {
		return true
	}

	return false
}

// SetTraceDepth gets a reference to the given TraceDepthType and assigns it to the TraceDepth field.
func (o *TraceJobAttr) SetTraceDepth(v TraceDepthType) {
	o.TraceDepth = &v
}

// GetTraceReference returns the TraceReference field value if set, zero value otherwise.
func (o *TraceJobAttr) GetTraceReference() TraceReferenceType {
	if o == nil || isNil(o.TraceReference) {
		var ret TraceReferenceType
		return ret
	}
	return *o.TraceReference
}

// GetTraceReferenceOk returns a tuple with the TraceReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceJobAttr) GetTraceReferenceOk() (*TraceReferenceType, bool) {
	if o == nil || isNil(o.TraceReference) {
    return nil, false
	}
	return o.TraceReference, true
}

// HasTraceReference returns a boolean if a field has been set.
func (o *TraceJobAttr) HasTraceReference() bool {
	if o != nil && !isNil(o.TraceReference) {
		return true
	}

	return false
}

// SetTraceReference gets a reference to the given TraceReferenceType and assigns it to the TraceReference field.
func (o *TraceJobAttr) SetTraceReference(v TraceReferenceType) {
	o.TraceReference = &v
}

// GetTraceRecordingSessionReference returns the TraceRecordingSessionReference field value if set, zero value otherwise.
func (o *TraceJobAttr) GetTraceRecordingSessionReference() string {
	if o == nil || isNil(o.TraceRecordingSessionReference) {
		var ret string
		return ret
	}
	return *o.TraceRecordingSessionReference
}

// GetTraceRecordingSessionReferenceOk returns a tuple with the TraceRecordingSessionReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceJobAttr) GetTraceRecordingSessionReferenceOk() (*string, bool) {
	if o == nil || isNil(o.TraceRecordingSessionReference) {
    return nil, false
	}
	return o.TraceRecordingSessionReference, true
}

// HasTraceRecordingSessionReference returns a boolean if a field has been set.
func (o *TraceJobAttr) HasTraceRecordingSessionReference() bool {
	if o != nil && !isNil(o.TraceRecordingSessionReference) {
		return true
	}

	return false
}

// SetTraceRecordingSessionReference gets a reference to the given string and assigns it to the TraceRecordingSessionReference field.
func (o *TraceJobAttr) SetTraceRecordingSessionReference(v string) {
	o.TraceRecordingSessionReference = &v
}

// GetJobId returns the JobId field value if set, zero value otherwise.
func (o *TraceJobAttr) GetJobId() string {
	if o == nil || isNil(o.JobId) {
		var ret string
		return ret
	}
	return *o.JobId
}

// GetJobIdOk returns a tuple with the JobId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceJobAttr) GetJobIdOk() (*string, bool) {
	if o == nil || isNil(o.JobId) {
    return nil, false
	}
	return o.JobId, true
}

// HasJobId returns a boolean if a field has been set.
func (o *TraceJobAttr) HasJobId() bool {
	if o != nil && !isNil(o.JobId) {
		return true
	}

	return false
}

// SetJobId gets a reference to the given string and assigns it to the JobId field.
func (o *TraceJobAttr) SetJobId(v string) {
	o.JobId = &v
}

// GetTraceReportingFormat returns the TraceReportingFormat field value if set, zero value otherwise.
func (o *TraceJobAttr) GetTraceReportingFormat() TraceReportingFormatType {
	if o == nil || isNil(o.TraceReportingFormat) {
		var ret TraceReportingFormatType
		return ret
	}
	return *o.TraceReportingFormat
}

// GetTraceReportingFormatOk returns a tuple with the TraceReportingFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceJobAttr) GetTraceReportingFormatOk() (*TraceReportingFormatType, bool) {
	if o == nil || isNil(o.TraceReportingFormat) {
    return nil, false
	}
	return o.TraceReportingFormat, true
}

// HasTraceReportingFormat returns a boolean if a field has been set.
func (o *TraceJobAttr) HasTraceReportingFormat() bool {
	if o != nil && !isNil(o.TraceReportingFormat) {
		return true
	}

	return false
}

// SetTraceReportingFormat gets a reference to the given TraceReportingFormatType and assigns it to the TraceReportingFormat field.
func (o *TraceJobAttr) SetTraceReportingFormat(v TraceReportingFormatType) {
	o.TraceReportingFormat = &v
}

// GetTraceTarget returns the TraceTarget field value if set, zero value otherwise.
func (o *TraceJobAttr) GetTraceTarget() TraceTargetType {
	if o == nil || isNil(o.TraceTarget) {
		var ret TraceTargetType
		return ret
	}
	return *o.TraceTarget
}

// GetTraceTargetOk returns a tuple with the TraceTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceJobAttr) GetTraceTargetOk() (*TraceTargetType, bool) {
	if o == nil || isNil(o.TraceTarget) {
    return nil, false
	}
	return o.TraceTarget, true
}

// HasTraceTarget returns a boolean if a field has been set.
func (o *TraceJobAttr) HasTraceTarget() bool {
	if o != nil && !isNil(o.TraceTarget) {
		return true
	}

	return false
}

// SetTraceTarget gets a reference to the given TraceTargetType and assigns it to the TraceTarget field.
func (o *TraceJobAttr) SetTraceTarget(v TraceTargetType) {
	o.TraceTarget = &v
}

// GetTriggeringEvents returns the TriggeringEvents field value if set, zero value otherwise.
func (o *TraceJobAttr) GetTriggeringEvents() TriggeringEventsType {
	if o == nil || isNil(o.TriggeringEvents) {
		var ret TriggeringEventsType
		return ret
	}
	return *o.TriggeringEvents
}

// GetTriggeringEventsOk returns a tuple with the TriggeringEvents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceJobAttr) GetTriggeringEventsOk() (*TriggeringEventsType, bool) {
	if o == nil || isNil(o.TriggeringEvents) {
    return nil, false
	}
	return o.TriggeringEvents, true
}

// HasTriggeringEvents returns a boolean if a field has been set.
func (o *TraceJobAttr) HasTriggeringEvents() bool {
	if o != nil && !isNil(o.TriggeringEvents) {
		return true
	}

	return false
}

// SetTriggeringEvents gets a reference to the given TriggeringEventsType and assigns it to the TriggeringEvents field.
func (o *TraceJobAttr) SetTriggeringEvents(v TriggeringEventsType) {
	o.TriggeringEvents = &v
}

// GetAnonymizationOfMDTData returns the AnonymizationOfMDTData field value if set, zero value otherwise.
func (o *TraceJobAttr) GetAnonymizationOfMDTData() AnonymizationOfMDTDataType {
	if o == nil || isNil(o.AnonymizationOfMDTData) {
		var ret AnonymizationOfMDTDataType
		return ret
	}
	return *o.AnonymizationOfMDTData
}

// GetAnonymizationOfMDTDataOk returns a tuple with the AnonymizationOfMDTData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceJobAttr) GetAnonymizationOfMDTDataOk() (*AnonymizationOfMDTDataType, bool) {
	if o == nil || isNil(o.AnonymizationOfMDTData) {
    return nil, false
	}
	return o.AnonymizationOfMDTData, true
}

// HasAnonymizationOfMDTData returns a boolean if a field has been set.
func (o *TraceJobAttr) HasAnonymizationOfMDTData() bool {
	if o != nil && !isNil(o.AnonymizationOfMDTData) {
		return true
	}

	return false
}

// SetAnonymizationOfMDTData gets a reference to the given AnonymizationOfMDTDataType and assigns it to the AnonymizationOfMDTData field.
func (o *TraceJobAttr) SetAnonymizationOfMDTData(v AnonymizationOfMDTDataType) {
	o.AnonymizationOfMDTData = &v
}

// GetAreaConfigurationForNeighCell returns the AreaConfigurationForNeighCell field value if set, zero value otherwise.
func (o *TraceJobAttr) GetAreaConfigurationForNeighCell() AreaConfig {
	if o == nil || isNil(o.AreaConfigurationForNeighCell) {
		var ret AreaConfig
		return ret
	}
	return *o.AreaConfigurationForNeighCell
}

// GetAreaConfigurationForNeighCellOk returns a tuple with the AreaConfigurationForNeighCell field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceJobAttr) GetAreaConfigurationForNeighCellOk() (*AreaConfig, bool) {
	if o == nil || isNil(o.AreaConfigurationForNeighCell) {
    return nil, false
	}
	return o.AreaConfigurationForNeighCell, true
}

// HasAreaConfigurationForNeighCell returns a boolean if a field has been set.
func (o *TraceJobAttr) HasAreaConfigurationForNeighCell() bool {
	if o != nil && !isNil(o.AreaConfigurationForNeighCell) {
		return true
	}

	return false
}

// SetAreaConfigurationForNeighCell gets a reference to the given AreaConfig and assigns it to the AreaConfigurationForNeighCell field.
func (o *TraceJobAttr) SetAreaConfigurationForNeighCell(v AreaConfig) {
	o.AreaConfigurationForNeighCell = &v
}

// GetAreaScope returns the AreaScope field value if set, zero value otherwise.
func (o *TraceJobAttr) GetAreaScope() []AreaScope {
	if o == nil || isNil(o.AreaScope) {
		var ret []AreaScope
		return ret
	}
	return o.AreaScope
}

// GetAreaScopeOk returns a tuple with the AreaScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceJobAttr) GetAreaScopeOk() ([]AreaScope, bool) {
	if o == nil || isNil(o.AreaScope) {
    return nil, false
	}
	return o.AreaScope, true
}

// HasAreaScope returns a boolean if a field has been set.
func (o *TraceJobAttr) HasAreaScope() bool {
	if o != nil && !isNil(o.AreaScope) {
		return true
	}

	return false
}

// SetAreaScope gets a reference to the given []AreaScope and assigns it to the AreaScope field.
func (o *TraceJobAttr) SetAreaScope(v []AreaScope) {
	o.AreaScope = v
}

// GetBeamLevelMeasurement returns the BeamLevelMeasurement field value if set, zero value otherwise.
func (o *TraceJobAttr) GetBeamLevelMeasurement() bool {
	if o == nil || isNil(o.BeamLevelMeasurement) {
		var ret bool
		return ret
	}
	return *o.BeamLevelMeasurement
}

// GetBeamLevelMeasurementOk returns a tuple with the BeamLevelMeasurement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceJobAttr) GetBeamLevelMeasurementOk() (*bool, bool) {
	if o == nil || isNil(o.BeamLevelMeasurement) {
    return nil, false
	}
	return o.BeamLevelMeasurement, true
}

// HasBeamLevelMeasurement returns a boolean if a field has been set.
func (o *TraceJobAttr) HasBeamLevelMeasurement() bool {
	if o != nil && !isNil(o.BeamLevelMeasurement) {
		return true
	}

	return false
}

// SetBeamLevelMeasurement gets a reference to the given bool and assigns it to the BeamLevelMeasurement field.
func (o *TraceJobAttr) SetBeamLevelMeasurement(v bool) {
	o.BeamLevelMeasurement = &v
}

// GetCollectionPeriodRRMLTE returns the CollectionPeriodRRMLTE field value if set, zero value otherwise.
func (o *TraceJobAttr) GetCollectionPeriodRRMLTE() CollectionPeriodRRMLTEType {
	if o == nil || isNil(o.CollectionPeriodRRMLTE) {
		var ret CollectionPeriodRRMLTEType
		return ret
	}
	return *o.CollectionPeriodRRMLTE
}

// GetCollectionPeriodRRMLTEOk returns a tuple with the CollectionPeriodRRMLTE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceJobAttr) GetCollectionPeriodRRMLTEOk() (*CollectionPeriodRRMLTEType, bool) {
	if o == nil || isNil(o.CollectionPeriodRRMLTE) {
    return nil, false
	}
	return o.CollectionPeriodRRMLTE, true
}

// HasCollectionPeriodRRMLTE returns a boolean if a field has been set.
func (o *TraceJobAttr) HasCollectionPeriodRRMLTE() bool {
	if o != nil && !isNil(o.CollectionPeriodRRMLTE) {
		return true
	}

	return false
}

// SetCollectionPeriodRRMLTE gets a reference to the given CollectionPeriodRRMLTEType and assigns it to the CollectionPeriodRRMLTE field.
func (o *TraceJobAttr) SetCollectionPeriodRRMLTE(v CollectionPeriodRRMLTEType) {
	o.CollectionPeriodRRMLTE = &v
}

// GetCollectionPeriodM6LTE returns the CollectionPeriodM6LTE field value if set, zero value otherwise.
func (o *TraceJobAttr) GetCollectionPeriodM6LTE() CollectionPeriodM6LTEType {
	if o == nil || isNil(o.CollectionPeriodM6LTE) {
		var ret CollectionPeriodM6LTEType
		return ret
	}
	return *o.CollectionPeriodM6LTE
}

// GetCollectionPeriodM6LTEOk returns a tuple with the CollectionPeriodM6LTE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceJobAttr) GetCollectionPeriodM6LTEOk() (*CollectionPeriodM6LTEType, bool) {
	if o == nil || isNil(o.CollectionPeriodM6LTE) {
    return nil, false
	}
	return o.CollectionPeriodM6LTE, true
}

// HasCollectionPeriodM6LTE returns a boolean if a field has been set.
func (o *TraceJobAttr) HasCollectionPeriodM6LTE() bool {
	if o != nil && !isNil(o.CollectionPeriodM6LTE) {
		return true
	}

	return false
}

// SetCollectionPeriodM6LTE gets a reference to the given CollectionPeriodM6LTEType and assigns it to the CollectionPeriodM6LTE field.
func (o *TraceJobAttr) SetCollectionPeriodM6LTE(v CollectionPeriodM6LTEType) {
	o.CollectionPeriodM6LTE = &v
}

// GetCollectionPeriodM7LTE returns the CollectionPeriodM7LTE field value if set, zero value otherwise.
func (o *TraceJobAttr) GetCollectionPeriodM7LTE() int32 {
	if o == nil || isNil(o.CollectionPeriodM7LTE) {
		var ret int32
		return ret
	}
	return *o.CollectionPeriodM7LTE
}

// GetCollectionPeriodM7LTEOk returns a tuple with the CollectionPeriodM7LTE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceJobAttr) GetCollectionPeriodM7LTEOk() (*int32, bool) {
	if o == nil || isNil(o.CollectionPeriodM7LTE) {
    return nil, false
	}
	return o.CollectionPeriodM7LTE, true
}

// HasCollectionPeriodM7LTE returns a boolean if a field has been set.
func (o *TraceJobAttr) HasCollectionPeriodM7LTE() bool {
	if o != nil && !isNil(o.CollectionPeriodM7LTE) {
		return true
	}

	return false
}

// SetCollectionPeriodM7LTE gets a reference to the given int32 and assigns it to the CollectionPeriodM7LTE field.
func (o *TraceJobAttr) SetCollectionPeriodM7LTE(v int32) {
	o.CollectionPeriodM7LTE = &v
}

// GetCollectionPeriodRRMUMTS returns the CollectionPeriodRRMUMTS field value if set, zero value otherwise.
func (o *TraceJobAttr) GetCollectionPeriodRRMUMTS() CollectionPeriodRRMUMTSType {
	if o == nil || isNil(o.CollectionPeriodRRMUMTS) {
		var ret CollectionPeriodRRMUMTSType
		return ret
	}
	return *o.CollectionPeriodRRMUMTS
}

// GetCollectionPeriodRRMUMTSOk returns a tuple with the CollectionPeriodRRMUMTS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceJobAttr) GetCollectionPeriodRRMUMTSOk() (*CollectionPeriodRRMUMTSType, bool) {
	if o == nil || isNil(o.CollectionPeriodRRMUMTS) {
    return nil, false
	}
	return o.CollectionPeriodRRMUMTS, true
}

// HasCollectionPeriodRRMUMTS returns a boolean if a field has been set.
func (o *TraceJobAttr) HasCollectionPeriodRRMUMTS() bool {
	if o != nil && !isNil(o.CollectionPeriodRRMUMTS) {
		return true
	}

	return false
}

// SetCollectionPeriodRRMUMTS gets a reference to the given CollectionPeriodRRMUMTSType and assigns it to the CollectionPeriodRRMUMTS field.
func (o *TraceJobAttr) SetCollectionPeriodRRMUMTS(v CollectionPeriodRRMUMTSType) {
	o.CollectionPeriodRRMUMTS = &v
}

// GetCollectionPeriodRRMNR returns the CollectionPeriodRRMNR field value if set, zero value otherwise.
func (o *TraceJobAttr) GetCollectionPeriodRRMNR() CollectionPeriodRRMNRType {
	if o == nil || isNil(o.CollectionPeriodRRMNR) {
		var ret CollectionPeriodRRMNRType
		return ret
	}
	return *o.CollectionPeriodRRMNR
}

// GetCollectionPeriodRRMNROk returns a tuple with the CollectionPeriodRRMNR field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceJobAttr) GetCollectionPeriodRRMNROk() (*CollectionPeriodRRMNRType, bool) {
	if o == nil || isNil(o.CollectionPeriodRRMNR) {
    return nil, false
	}
	return o.CollectionPeriodRRMNR, true
}

// HasCollectionPeriodRRMNR returns a boolean if a field has been set.
func (o *TraceJobAttr) HasCollectionPeriodRRMNR() bool {
	if o != nil && !isNil(o.CollectionPeriodRRMNR) {
		return true
	}

	return false
}

// SetCollectionPeriodRRMNR gets a reference to the given CollectionPeriodRRMNRType and assigns it to the CollectionPeriodRRMNR field.
func (o *TraceJobAttr) SetCollectionPeriodRRMNR(v CollectionPeriodRRMNRType) {
	o.CollectionPeriodRRMNR = &v
}

// GetCollectionPeriodM6NR returns the CollectionPeriodM6NR field value if set, zero value otherwise.
func (o *TraceJobAttr) GetCollectionPeriodM6NR() CollectionPeriodM6NRType {
	if o == nil || isNil(o.CollectionPeriodM6NR) {
		var ret CollectionPeriodM6NRType
		return ret
	}
	return *o.CollectionPeriodM6NR
}

// GetCollectionPeriodM6NROk returns a tuple with the CollectionPeriodM6NR field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceJobAttr) GetCollectionPeriodM6NROk() (*CollectionPeriodM6NRType, bool) {
	if o == nil || isNil(o.CollectionPeriodM6NR) {
    return nil, false
	}
	return o.CollectionPeriodM6NR, true
}

// HasCollectionPeriodM6NR returns a boolean if a field has been set.
func (o *TraceJobAttr) HasCollectionPeriodM6NR() bool {
	if o != nil && !isNil(o.CollectionPeriodM6NR) {
		return true
	}

	return false
}

// SetCollectionPeriodM6NR gets a reference to the given CollectionPeriodM6NRType and assigns it to the CollectionPeriodM6NR field.
func (o *TraceJobAttr) SetCollectionPeriodM6NR(v CollectionPeriodM6NRType) {
	o.CollectionPeriodM6NR = &v
}

// GetCollectionPeriodM7NR returns the CollectionPeriodM7NR field value if set, zero value otherwise.
func (o *TraceJobAttr) GetCollectionPeriodM7NR() int32 {
	if o == nil || isNil(o.CollectionPeriodM7NR) {
		var ret int32
		return ret
	}
	return *o.CollectionPeriodM7NR
}

// GetCollectionPeriodM7NROk returns a tuple with the CollectionPeriodM7NR field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceJobAttr) GetCollectionPeriodM7NROk() (*int32, bool) {
	if o == nil || isNil(o.CollectionPeriodM7NR) {
    return nil, false
	}
	return o.CollectionPeriodM7NR, true
}

// HasCollectionPeriodM7NR returns a boolean if a field has been set.
func (o *TraceJobAttr) HasCollectionPeriodM7NR() bool {
	if o != nil && !isNil(o.CollectionPeriodM7NR) {
		return true
	}

	return false
}

// SetCollectionPeriodM7NR gets a reference to the given int32 and assigns it to the CollectionPeriodM7NR field.
func (o *TraceJobAttr) SetCollectionPeriodM7NR(v int32) {
	o.CollectionPeriodM7NR = &v
}

// GetEventListForEventTriggeredMeasurement returns the EventListForEventTriggeredMeasurement field value if set, zero value otherwise.
func (o *TraceJobAttr) GetEventListForEventTriggeredMeasurement() EventListForEventTriggeredMeasurementType {
	if o == nil || isNil(o.EventListForEventTriggeredMeasurement) {
		var ret EventListForEventTriggeredMeasurementType
		return ret
	}
	return *o.EventListForEventTriggeredMeasurement
}

// GetEventListForEventTriggeredMeasurementOk returns a tuple with the EventListForEventTriggeredMeasurement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceJobAttr) GetEventListForEventTriggeredMeasurementOk() (*EventListForEventTriggeredMeasurementType, bool) {
	if o == nil || isNil(o.EventListForEventTriggeredMeasurement) {
    return nil, false
	}
	return o.EventListForEventTriggeredMeasurement, true
}

// HasEventListForEventTriggeredMeasurement returns a boolean if a field has been set.
func (o *TraceJobAttr) HasEventListForEventTriggeredMeasurement() bool {
	if o != nil && !isNil(o.EventListForEventTriggeredMeasurement) {
		return true
	}

	return false
}

// SetEventListForEventTriggeredMeasurement gets a reference to the given EventListForEventTriggeredMeasurementType and assigns it to the EventListForEventTriggeredMeasurement field.
func (o *TraceJobAttr) SetEventListForEventTriggeredMeasurement(v EventListForEventTriggeredMeasurementType) {
	o.EventListForEventTriggeredMeasurement = &v
}

// GetEventThreshold returns the EventThreshold field value if set, zero value otherwise.
func (o *TraceJobAttr) GetEventThreshold() EventThresholdType {
	if o == nil || isNil(o.EventThreshold) {
		var ret EventThresholdType
		return ret
	}
	return *o.EventThreshold
}

// GetEventThresholdOk returns a tuple with the EventThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceJobAttr) GetEventThresholdOk() (*EventThresholdType, bool) {
	if o == nil || isNil(o.EventThreshold) {
    return nil, false
	}
	return o.EventThreshold, true
}

// HasEventThreshold returns a boolean if a field has been set.
func (o *TraceJobAttr) HasEventThreshold() bool {
	if o != nil && !isNil(o.EventThreshold) {
		return true
	}

	return false
}

// SetEventThreshold gets a reference to the given EventThresholdType and assigns it to the EventThreshold field.
func (o *TraceJobAttr) SetEventThreshold(v EventThresholdType) {
	o.EventThreshold = &v
}

// GetListOfMeasurements returns the ListOfMeasurements field value if set, zero value otherwise.
func (o *TraceJobAttr) GetListOfMeasurements() ListOfMeasurementsType {
	if o == nil || isNil(o.ListOfMeasurements) {
		var ret ListOfMeasurementsType
		return ret
	}
	return *o.ListOfMeasurements
}

// GetListOfMeasurementsOk returns a tuple with the ListOfMeasurements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceJobAttr) GetListOfMeasurementsOk() (*ListOfMeasurementsType, bool) {
	if o == nil || isNil(o.ListOfMeasurements) {
    return nil, false
	}
	return o.ListOfMeasurements, true
}

// HasListOfMeasurements returns a boolean if a field has been set.
func (o *TraceJobAttr) HasListOfMeasurements() bool {
	if o != nil && !isNil(o.ListOfMeasurements) {
		return true
	}

	return false
}

// SetListOfMeasurements gets a reference to the given ListOfMeasurementsType and assigns it to the ListOfMeasurements field.
func (o *TraceJobAttr) SetListOfMeasurements(v ListOfMeasurementsType) {
	o.ListOfMeasurements = &v
}

// GetLoggingDuration returns the LoggingDuration field value if set, zero value otherwise.
func (o *TraceJobAttr) GetLoggingDuration() LoggingDurationType {
	if o == nil || isNil(o.LoggingDuration) {
		var ret LoggingDurationType
		return ret
	}
	return *o.LoggingDuration
}

// GetLoggingDurationOk returns a tuple with the LoggingDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceJobAttr) GetLoggingDurationOk() (*LoggingDurationType, bool) {
	if o == nil || isNil(o.LoggingDuration) {
    return nil, false
	}
	return o.LoggingDuration, true
}

// HasLoggingDuration returns a boolean if a field has been set.
func (o *TraceJobAttr) HasLoggingDuration() bool {
	if o != nil && !isNil(o.LoggingDuration) {
		return true
	}

	return false
}

// SetLoggingDuration gets a reference to the given LoggingDurationType and assigns it to the LoggingDuration field.
func (o *TraceJobAttr) SetLoggingDuration(v LoggingDurationType) {
	o.LoggingDuration = &v
}

// GetLoggingInterval returns the LoggingInterval field value if set, zero value otherwise.
func (o *TraceJobAttr) GetLoggingInterval() LoggingIntervalType {
	if o == nil || isNil(o.LoggingInterval) {
		var ret LoggingIntervalType
		return ret
	}
	return *o.LoggingInterval
}

// GetLoggingIntervalOk returns a tuple with the LoggingInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceJobAttr) GetLoggingIntervalOk() (*LoggingIntervalType, bool) {
	if o == nil || isNil(o.LoggingInterval) {
    return nil, false
	}
	return o.LoggingInterval, true
}

// HasLoggingInterval returns a boolean if a field has been set.
func (o *TraceJobAttr) HasLoggingInterval() bool {
	if o != nil && !isNil(o.LoggingInterval) {
		return true
	}

	return false
}

// SetLoggingInterval gets a reference to the given LoggingIntervalType and assigns it to the LoggingInterval field.
func (o *TraceJobAttr) SetLoggingInterval(v LoggingIntervalType) {
	o.LoggingInterval = &v
}

// GetEventThresholdL1 returns the EventThresholdL1 field value if set, zero value otherwise.
func (o *TraceJobAttr) GetEventThresholdL1() EventThresholdL1Type {
	if o == nil || isNil(o.EventThresholdL1) {
		var ret EventThresholdL1Type
		return ret
	}
	return *o.EventThresholdL1
}

// GetEventThresholdL1Ok returns a tuple with the EventThresholdL1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceJobAttr) GetEventThresholdL1Ok() (*EventThresholdL1Type, bool) {
	if o == nil || isNil(o.EventThresholdL1) {
    return nil, false
	}
	return o.EventThresholdL1, true
}

// HasEventThresholdL1 returns a boolean if a field has been set.
func (o *TraceJobAttr) HasEventThresholdL1() bool {
	if o != nil && !isNil(o.EventThresholdL1) {
		return true
	}

	return false
}

// SetEventThresholdL1 gets a reference to the given EventThresholdL1Type and assigns it to the EventThresholdL1 field.
func (o *TraceJobAttr) SetEventThresholdL1(v EventThresholdL1Type) {
	o.EventThresholdL1 = &v
}

// GetHysteresisL1 returns the HysteresisL1 field value if set, zero value otherwise.
func (o *TraceJobAttr) GetHysteresisL1() int32 {
	if o == nil || isNil(o.HysteresisL1) {
		var ret int32
		return ret
	}
	return *o.HysteresisL1
}

// GetHysteresisL1Ok returns a tuple with the HysteresisL1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceJobAttr) GetHysteresisL1Ok() (*int32, bool) {
	if o == nil || isNil(o.HysteresisL1) {
    return nil, false
	}
	return o.HysteresisL1, true
}

// HasHysteresisL1 returns a boolean if a field has been set.
func (o *TraceJobAttr) HasHysteresisL1() bool {
	if o != nil && !isNil(o.HysteresisL1) {
		return true
	}

	return false
}

// SetHysteresisL1 gets a reference to the given int32 and assigns it to the HysteresisL1 field.
func (o *TraceJobAttr) SetHysteresisL1(v int32) {
	o.HysteresisL1 = &v
}

// GetTimeToTriggerL1 returns the TimeToTriggerL1 field value if set, zero value otherwise.
func (o *TraceJobAttr) GetTimeToTriggerL1() TimeToTriggerL1Type {
	if o == nil || isNil(o.TimeToTriggerL1) {
		var ret TimeToTriggerL1Type
		return ret
	}
	return *o.TimeToTriggerL1
}

// GetTimeToTriggerL1Ok returns a tuple with the TimeToTriggerL1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceJobAttr) GetTimeToTriggerL1Ok() (*TimeToTriggerL1Type, bool) {
	if o == nil || isNil(o.TimeToTriggerL1) {
    return nil, false
	}
	return o.TimeToTriggerL1, true
}

// HasTimeToTriggerL1 returns a boolean if a field has been set.
func (o *TraceJobAttr) HasTimeToTriggerL1() bool {
	if o != nil && !isNil(o.TimeToTriggerL1) {
		return true
	}

	return false
}

// SetTimeToTriggerL1 gets a reference to the given TimeToTriggerL1Type and assigns it to the TimeToTriggerL1 field.
func (o *TraceJobAttr) SetTimeToTriggerL1(v TimeToTriggerL1Type) {
	o.TimeToTriggerL1 = &v
}

// GetMBSFNAreaList returns the MBSFNAreaList field value if set, zero value otherwise.
func (o *TraceJobAttr) GetMBSFNAreaList() []MbsfnArea {
	if o == nil || isNil(o.MBSFNAreaList) {
		var ret []MbsfnArea
		return ret
	}
	return o.MBSFNAreaList
}

// GetMBSFNAreaListOk returns a tuple with the MBSFNAreaList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceJobAttr) GetMBSFNAreaListOk() ([]MbsfnArea, bool) {
	if o == nil || isNil(o.MBSFNAreaList) {
    return nil, false
	}
	return o.MBSFNAreaList, true
}

// HasMBSFNAreaList returns a boolean if a field has been set.
func (o *TraceJobAttr) HasMBSFNAreaList() bool {
	if o != nil && !isNil(o.MBSFNAreaList) {
		return true
	}

	return false
}

// SetMBSFNAreaList gets a reference to the given []MbsfnArea and assigns it to the MBSFNAreaList field.
func (o *TraceJobAttr) SetMBSFNAreaList(v []MbsfnArea) {
	o.MBSFNAreaList = v
}

// GetMeasurementPeriodLTE returns the MeasurementPeriodLTE field value if set, zero value otherwise.
func (o *TraceJobAttr) GetMeasurementPeriodLTE() MeasurementPeriodLTEType {
	if o == nil || isNil(o.MeasurementPeriodLTE) {
		var ret MeasurementPeriodLTEType
		return ret
	}
	return *o.MeasurementPeriodLTE
}

// GetMeasurementPeriodLTEOk returns a tuple with the MeasurementPeriodLTE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceJobAttr) GetMeasurementPeriodLTEOk() (*MeasurementPeriodLTEType, bool) {
	if o == nil || isNil(o.MeasurementPeriodLTE) {
    return nil, false
	}
	return o.MeasurementPeriodLTE, true
}

// HasMeasurementPeriodLTE returns a boolean if a field has been set.
func (o *TraceJobAttr) HasMeasurementPeriodLTE() bool {
	if o != nil && !isNil(o.MeasurementPeriodLTE) {
		return true
	}

	return false
}

// SetMeasurementPeriodLTE gets a reference to the given MeasurementPeriodLTEType and assigns it to the MeasurementPeriodLTE field.
func (o *TraceJobAttr) SetMeasurementPeriodLTE(v MeasurementPeriodLTEType) {
	o.MeasurementPeriodLTE = &v
}

// GetMeasurementPeriodUMTS returns the MeasurementPeriodUMTS field value if set, zero value otherwise.
func (o *TraceJobAttr) GetMeasurementPeriodUMTS() MeasurementPeriodUMTSType {
	if o == nil || isNil(o.MeasurementPeriodUMTS) {
		var ret MeasurementPeriodUMTSType
		return ret
	}
	return *o.MeasurementPeriodUMTS
}

// GetMeasurementPeriodUMTSOk returns a tuple with the MeasurementPeriodUMTS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceJobAttr) GetMeasurementPeriodUMTSOk() (*MeasurementPeriodUMTSType, bool) {
	if o == nil || isNil(o.MeasurementPeriodUMTS) {
    return nil, false
	}
	return o.MeasurementPeriodUMTS, true
}

// HasMeasurementPeriodUMTS returns a boolean if a field has been set.
func (o *TraceJobAttr) HasMeasurementPeriodUMTS() bool {
	if o != nil && !isNil(o.MeasurementPeriodUMTS) {
		return true
	}

	return false
}

// SetMeasurementPeriodUMTS gets a reference to the given MeasurementPeriodUMTSType and assigns it to the MeasurementPeriodUMTS field.
func (o *TraceJobAttr) SetMeasurementPeriodUMTS(v MeasurementPeriodUMTSType) {
	o.MeasurementPeriodUMTS = &v
}

// GetMeasurementQuantity returns the MeasurementQuantity field value if set, zero value otherwise.
func (o *TraceJobAttr) GetMeasurementQuantity() MeasurementQuantityType {
	if o == nil || isNil(o.MeasurementQuantity) {
		var ret MeasurementQuantityType
		return ret
	}
	return *o.MeasurementQuantity
}

// GetMeasurementQuantityOk returns a tuple with the MeasurementQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceJobAttr) GetMeasurementQuantityOk() (*MeasurementQuantityType, bool) {
	if o == nil || isNil(o.MeasurementQuantity) {
    return nil, false
	}
	return o.MeasurementQuantity, true
}

// HasMeasurementQuantity returns a boolean if a field has been set.
func (o *TraceJobAttr) HasMeasurementQuantity() bool {
	if o != nil && !isNil(o.MeasurementQuantity) {
		return true
	}

	return false
}

// SetMeasurementQuantity gets a reference to the given MeasurementQuantityType and assigns it to the MeasurementQuantity field.
func (o *TraceJobAttr) SetMeasurementQuantity(v MeasurementQuantityType) {
	o.MeasurementQuantity = &v
}

// GetEventThresholdUphUMTS returns the EventThresholdUphUMTS field value if set, zero value otherwise.
func (o *TraceJobAttr) GetEventThresholdUphUMTS() int32 {
	if o == nil || isNil(o.EventThresholdUphUMTS) {
		var ret int32
		return ret
	}
	return *o.EventThresholdUphUMTS
}

// GetEventThresholdUphUMTSOk returns a tuple with the EventThresholdUphUMTS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceJobAttr) GetEventThresholdUphUMTSOk() (*int32, bool) {
	if o == nil || isNil(o.EventThresholdUphUMTS) {
    return nil, false
	}
	return o.EventThresholdUphUMTS, true
}

// HasEventThresholdUphUMTS returns a boolean if a field has been set.
func (o *TraceJobAttr) HasEventThresholdUphUMTS() bool {
	if o != nil && !isNil(o.EventThresholdUphUMTS) {
		return true
	}

	return false
}

// SetEventThresholdUphUMTS gets a reference to the given int32 and assigns it to the EventThresholdUphUMTS field.
func (o *TraceJobAttr) SetEventThresholdUphUMTS(v int32) {
	o.EventThresholdUphUMTS = &v
}

// GetPLMNList returns the PLMNList field value if set, zero value otherwise.
func (o *TraceJobAttr) GetPLMNList() []PLMNListTypeInner {
	if o == nil || isNil(o.PLMNList) {
		var ret []PLMNListTypeInner
		return ret
	}
	return o.PLMNList
}

// GetPLMNListOk returns a tuple with the PLMNList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceJobAttr) GetPLMNListOk() ([]PLMNListTypeInner, bool) {
	if o == nil || isNil(o.PLMNList) {
    return nil, false
	}
	return o.PLMNList, true
}

// HasPLMNList returns a boolean if a field has been set.
func (o *TraceJobAttr) HasPLMNList() bool {
	if o != nil && !isNil(o.PLMNList) {
		return true
	}

	return false
}

// SetPLMNList gets a reference to the given []PLMNListTypeInner and assigns it to the PLMNList field.
func (o *TraceJobAttr) SetPLMNList(v []PLMNListTypeInner) {
	o.PLMNList = v
}

// GetPositioningMethod returns the PositioningMethod field value if set, zero value otherwise.
func (o *TraceJobAttr) GetPositioningMethod() PositioningMethodType {
	if o == nil || isNil(o.PositioningMethod) {
		var ret PositioningMethodType
		return ret
	}
	return *o.PositioningMethod
}

// GetPositioningMethodOk returns a tuple with the PositioningMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceJobAttr) GetPositioningMethodOk() (*PositioningMethodType, bool) {
	if o == nil || isNil(o.PositioningMethod) {
    return nil, false
	}
	return o.PositioningMethod, true
}

// HasPositioningMethod returns a boolean if a field has been set.
func (o *TraceJobAttr) HasPositioningMethod() bool {
	if o != nil && !isNil(o.PositioningMethod) {
		return true
	}

	return false
}

// SetPositioningMethod gets a reference to the given PositioningMethodType and assigns it to the PositioningMethod field.
func (o *TraceJobAttr) SetPositioningMethod(v PositioningMethodType) {
	o.PositioningMethod = &v
}

// GetReportAmount returns the ReportAmount field value if set, zero value otherwise.
func (o *TraceJobAttr) GetReportAmount() ReportAmountType {
	if o == nil || isNil(o.ReportAmount) {
		var ret ReportAmountType
		return ret
	}
	return *o.ReportAmount
}

// GetReportAmountOk returns a tuple with the ReportAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceJobAttr) GetReportAmountOk() (*ReportAmountType, bool) {
	if o == nil || isNil(o.ReportAmount) {
    return nil, false
	}
	return o.ReportAmount, true
}

// HasReportAmount returns a boolean if a field has been set.
func (o *TraceJobAttr) HasReportAmount() bool {
	if o != nil && !isNil(o.ReportAmount) {
		return true
	}

	return false
}

// SetReportAmount gets a reference to the given ReportAmountType and assigns it to the ReportAmount field.
func (o *TraceJobAttr) SetReportAmount(v ReportAmountType) {
	o.ReportAmount = &v
}

// GetReportingTrigger returns the ReportingTrigger field value if set, zero value otherwise.
func (o *TraceJobAttr) GetReportingTrigger() []string {
	if o == nil || isNil(o.ReportingTrigger) {
		var ret []string
		return ret
	}
	return o.ReportingTrigger
}

// GetReportingTriggerOk returns a tuple with the ReportingTrigger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceJobAttr) GetReportingTriggerOk() ([]string, bool) {
	if o == nil || isNil(o.ReportingTrigger) {
    return nil, false
	}
	return o.ReportingTrigger, true
}

// HasReportingTrigger returns a boolean if a field has been set.
func (o *TraceJobAttr) HasReportingTrigger() bool {
	if o != nil && !isNil(o.ReportingTrigger) {
		return true
	}

	return false
}

// SetReportingTrigger gets a reference to the given []string and assigns it to the ReportingTrigger field.
func (o *TraceJobAttr) SetReportingTrigger(v []string) {
	o.ReportingTrigger = v
}

// GetReportInterval returns the ReportInterval field value if set, zero value otherwise.
func (o *TraceJobAttr) GetReportInterval() ReportIntervalType {
	if o == nil || isNil(o.ReportInterval) {
		var ret ReportIntervalType
		return ret
	}
	return *o.ReportInterval
}

// GetReportIntervalOk returns a tuple with the ReportInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceJobAttr) GetReportIntervalOk() (*ReportIntervalType, bool) {
	if o == nil || isNil(o.ReportInterval) {
    return nil, false
	}
	return o.ReportInterval, true
}

// HasReportInterval returns a boolean if a field has been set.
func (o *TraceJobAttr) HasReportInterval() bool {
	if o != nil && !isNil(o.ReportInterval) {
		return true
	}

	return false
}

// SetReportInterval gets a reference to the given ReportIntervalType and assigns it to the ReportInterval field.
func (o *TraceJobAttr) SetReportInterval(v ReportIntervalType) {
	o.ReportInterval = &v
}

// GetReportType returns the ReportType field value if set, zero value otherwise.
func (o *TraceJobAttr) GetReportType() ReportTypeType {
	if o == nil || isNil(o.ReportType) {
		var ret ReportTypeType
		return ret
	}
	return *o.ReportType
}

// GetReportTypeOk returns a tuple with the ReportType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceJobAttr) GetReportTypeOk() (*ReportTypeType, bool) {
	if o == nil || isNil(o.ReportType) {
    return nil, false
	}
	return o.ReportType, true
}

// HasReportType returns a boolean if a field has been set.
func (o *TraceJobAttr) HasReportType() bool {
	if o != nil && !isNil(o.ReportType) {
		return true
	}

	return false
}

// SetReportType gets a reference to the given ReportTypeType and assigns it to the ReportType field.
func (o *TraceJobAttr) SetReportType(v ReportTypeType) {
	o.ReportType = &v
}

// GetSensorInformation returns the SensorInformation field value if set, zero value otherwise.
func (o *TraceJobAttr) GetSensorInformation() []string {
	if o == nil || isNil(o.SensorInformation) {
		var ret []string
		return ret
	}
	return o.SensorInformation
}

// GetSensorInformationOk returns a tuple with the SensorInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceJobAttr) GetSensorInformationOk() ([]string, bool) {
	if o == nil || isNil(o.SensorInformation) {
    return nil, false
	}
	return o.SensorInformation, true
}

// HasSensorInformation returns a boolean if a field has been set.
func (o *TraceJobAttr) HasSensorInformation() bool {
	if o != nil && !isNil(o.SensorInformation) {
		return true
	}

	return false
}

// SetSensorInformation gets a reference to the given []string and assigns it to the SensorInformation field.
func (o *TraceJobAttr) SetSensorInformation(v []string) {
	o.SensorInformation = v
}

// GetTraceCollectionEntityId returns the TraceCollectionEntityId field value if set, zero value otherwise.
func (o *TraceJobAttr) GetTraceCollectionEntityId() int32 {
	if o == nil || isNil(o.TraceCollectionEntityId) {
		var ret int32
		return ret
	}
	return *o.TraceCollectionEntityId
}

// GetTraceCollectionEntityIdOk returns a tuple with the TraceCollectionEntityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceJobAttr) GetTraceCollectionEntityIdOk() (*int32, bool) {
	if o == nil || isNil(o.TraceCollectionEntityId) {
    return nil, false
	}
	return o.TraceCollectionEntityId, true
}

// HasTraceCollectionEntityId returns a boolean if a field has been set.
func (o *TraceJobAttr) HasTraceCollectionEntityId() bool {
	if o != nil && !isNil(o.TraceCollectionEntityId) {
		return true
	}

	return false
}

// SetTraceCollectionEntityId gets a reference to the given int32 and assigns it to the TraceCollectionEntityId field.
func (o *TraceJobAttr) SetTraceCollectionEntityId(v int32) {
	o.TraceCollectionEntityId = &v
}

func (o TraceJobAttr) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.JobType) {
		toSerialize["jobType"] = o.JobType
	}
	if !isNil(o.ListOfInterfaces) {
		toSerialize["listOfInterfaces"] = o.ListOfInterfaces
	}
	if !isNil(o.ListOfNETypes) {
		toSerialize["listOfNETypes"] = o.ListOfNETypes
	}
	if !isNil(o.PLMNTarget) {
		toSerialize["pLMNTarget"] = o.PLMNTarget
	}
	if !isNil(o.TraceReportingConsumerUri) {
		toSerialize["traceReportingConsumerUri"] = o.TraceReportingConsumerUri
	}
	if !isNil(o.TraceCollectionEntityIPAddress) {
		toSerialize["traceCollectionEntityIPAddress"] = o.TraceCollectionEntityIPAddress
	}
	if !isNil(o.TraceDepth) {
		toSerialize["traceDepth"] = o.TraceDepth
	}
	if !isNil(o.TraceReference) {
		toSerialize["traceReference"] = o.TraceReference
	}
	if !isNil(o.TraceRecordingSessionReference) {
		toSerialize["traceRecordingSessionReference"] = o.TraceRecordingSessionReference
	}
	if !isNil(o.JobId) {
		toSerialize["jobId"] = o.JobId
	}
	if !isNil(o.TraceReportingFormat) {
		toSerialize["traceReportingFormat"] = o.TraceReportingFormat
	}
	if !isNil(o.TraceTarget) {
		toSerialize["traceTarget"] = o.TraceTarget
	}
	if !isNil(o.TriggeringEvents) {
		toSerialize["triggeringEvents"] = o.TriggeringEvents
	}
	if !isNil(o.AnonymizationOfMDTData) {
		toSerialize["anonymizationOfMDTData"] = o.AnonymizationOfMDTData
	}
	if !isNil(o.AreaConfigurationForNeighCell) {
		toSerialize["areaConfigurationForNeighCell"] = o.AreaConfigurationForNeighCell
	}
	if !isNil(o.AreaScope) {
		toSerialize["areaScope"] = o.AreaScope
	}
	if !isNil(o.BeamLevelMeasurement) {
		toSerialize["beamLevelMeasurement"] = o.BeamLevelMeasurement
	}
	if !isNil(o.CollectionPeriodRRMLTE) {
		toSerialize["collectionPeriodRRMLTE"] = o.CollectionPeriodRRMLTE
	}
	if !isNil(o.CollectionPeriodM6LTE) {
		toSerialize["collectionPeriodM6LTE"] = o.CollectionPeriodM6LTE
	}
	if !isNil(o.CollectionPeriodM7LTE) {
		toSerialize["collectionPeriodM7LTE"] = o.CollectionPeriodM7LTE
	}
	if !isNil(o.CollectionPeriodRRMUMTS) {
		toSerialize["collectionPeriodRRMUMTS"] = o.CollectionPeriodRRMUMTS
	}
	if !isNil(o.CollectionPeriodRRMNR) {
		toSerialize["collectionPeriodRRMNR"] = o.CollectionPeriodRRMNR
	}
	if !isNil(o.CollectionPeriodM6NR) {
		toSerialize["collectionPeriodM6NR"] = o.CollectionPeriodM6NR
	}
	if !isNil(o.CollectionPeriodM7NR) {
		toSerialize["collectionPeriodM7NR"] = o.CollectionPeriodM7NR
	}
	if !isNil(o.EventListForEventTriggeredMeasurement) {
		toSerialize["eventListForEventTriggeredMeasurement"] = o.EventListForEventTriggeredMeasurement
	}
	if !isNil(o.EventThreshold) {
		toSerialize["eventThreshold"] = o.EventThreshold
	}
	if !isNil(o.ListOfMeasurements) {
		toSerialize["listOfMeasurements"] = o.ListOfMeasurements
	}
	if !isNil(o.LoggingDuration) {
		toSerialize["loggingDuration"] = o.LoggingDuration
	}
	if !isNil(o.LoggingInterval) {
		toSerialize["loggingInterval"] = o.LoggingInterval
	}
	if !isNil(o.EventThresholdL1) {
		toSerialize["eventThresholdL1"] = o.EventThresholdL1
	}
	if !isNil(o.HysteresisL1) {
		toSerialize["hysteresisL1"] = o.HysteresisL1
	}
	if !isNil(o.TimeToTriggerL1) {
		toSerialize["timeToTriggerL1"] = o.TimeToTriggerL1
	}
	if !isNil(o.MBSFNAreaList) {
		toSerialize["mBSFNAreaList"] = o.MBSFNAreaList
	}
	if !isNil(o.MeasurementPeriodLTE) {
		toSerialize["measurementPeriodLTE"] = o.MeasurementPeriodLTE
	}
	if !isNil(o.MeasurementPeriodUMTS) {
		toSerialize["measurementPeriodUMTS"] = o.MeasurementPeriodUMTS
	}
	if !isNil(o.MeasurementQuantity) {
		toSerialize["measurementQuantity"] = o.MeasurementQuantity
	}
	if !isNil(o.EventThresholdUphUMTS) {
		toSerialize["eventThresholdUphUMTS"] = o.EventThresholdUphUMTS
	}
	if !isNil(o.PLMNList) {
		toSerialize["pLMNList"] = o.PLMNList
	}
	if !isNil(o.PositioningMethod) {
		toSerialize["positioningMethod"] = o.PositioningMethod
	}
	if !isNil(o.ReportAmount) {
		toSerialize["reportAmount"] = o.ReportAmount
	}
	if !isNil(o.ReportingTrigger) {
		toSerialize["reportingTrigger"] = o.ReportingTrigger
	}
	if !isNil(o.ReportInterval) {
		toSerialize["reportInterval"] = o.ReportInterval
	}
	if !isNil(o.ReportType) {
		toSerialize["reportType"] = o.ReportType
	}
	if !isNil(o.SensorInformation) {
		toSerialize["sensorInformation"] = o.SensorInformation
	}
	if !isNil(o.TraceCollectionEntityId) {
		toSerialize["traceCollectionEntityId"] = o.TraceCollectionEntityId
	}
	return json.Marshal(toSerialize)
}

type NullableTraceJobAttr struct {
	value *TraceJobAttr
	isSet bool
}

func (v NullableTraceJobAttr) Get() *TraceJobAttr {
	return v.value
}

func (v *NullableTraceJobAttr) Set(val *TraceJobAttr) {
	v.value = val
	v.isSet = true
}

func (v NullableTraceJobAttr) IsSet() bool {
	return v.isSet
}

func (v *NullableTraceJobAttr) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTraceJobAttr(val *TraceJobAttr) *NullableTraceJobAttr {
	return &NullableTraceJobAttr{value: val, isSet: true}
}

func (v NullableTraceJobAttr) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTraceJobAttr) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


