/*
3GPP 5GC NRM

OAS 3.0.1 specification of the 5GC NRM Â© 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 17.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package 5GcNrm

import (
	"encoding/json"
	"fmt"
)

// FlowStatus Describes whether the IP flow(s) are enabled or disabled.
type FlowStatus struct {
	FlowStatusAnyOf *FlowStatusAnyOf
	string *string
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *FlowStatus) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into FlowStatusAnyOf
	err = json.Unmarshal(data, &dst.FlowStatusAnyOf);
	if err == nil {
		jsonFlowStatusAnyOf, _ := json.Marshal(dst.FlowStatusAnyOf)
		if string(jsonFlowStatusAnyOf) == "{}" { // empty struct
			dst.FlowStatusAnyOf = nil
		} else {
			return nil // data stored in dst.FlowStatusAnyOf, return on the first match
		}
	} else {
		dst.FlowStatusAnyOf = nil
	}

	// try to unmarshal JSON data into string
	err = json.Unmarshal(data, &dst.string);
	if err == nil {
		jsonstring, _ := json.Marshal(dst.string)
		if string(jsonstring) == "{}" { // empty struct
			dst.string = nil
		} else {
			return nil // data stored in dst.string, return on the first match
		}
	} else {
		dst.string = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(FlowStatus)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *FlowStatus) MarshalJSON() ([]byte, error) {
	if src.FlowStatusAnyOf != nil {
		return json.Marshal(&src.FlowStatusAnyOf)
	}

	if src.string != nil {
		return json.Marshal(&src.string)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableFlowStatus struct {
	value *FlowStatus
	isSet bool
}

func (v NullableFlowStatus) Get() *FlowStatus {
	return v.value
}

func (v *NullableFlowStatus) Set(val *FlowStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableFlowStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableFlowStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlowStatus(val *FlowStatus) *NullableFlowStatus {
	return &NullableFlowStatus{value: val, isSet: true}
}

func (v NullableFlowStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlowStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


