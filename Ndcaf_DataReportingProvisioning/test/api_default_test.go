/*
Ndcaf_DataReportingProvisioning

Testing DefaultApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package Ndcaf_DataReportingProvisioning

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_Ndcaf_DataReportingProvisioning_DefaultApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test DefaultApiService CreateConfiguration", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var sessionId string
        var configurationId string

        resp, httpRes, err := apiClient.DefaultApi.CreateConfiguration(context.Background(), sessionId, configurationId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService CreateSession", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.DefaultApi.CreateSession(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService DestroyConfiguration", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var sessionId string
        var configurationId string

        resp, httpRes, err := apiClient.DefaultApi.DestroyConfiguration(context.Background(), sessionId, configurationId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService DestroySession", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var sessionId string

        resp, httpRes, err := apiClient.DefaultApi.DestroySession(context.Background(), sessionId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService ModifyConfiguration", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var sessionId string
        var configurationId string

        resp, httpRes, err := apiClient.DefaultApi.ModifyConfiguration(context.Background(), sessionId, configurationId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService RetrieveConfiguration", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var sessionId string
        var configurationId string

        resp, httpRes, err := apiClient.DefaultApi.RetrieveConfiguration(context.Background(), sessionId, configurationId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService RetrieveSession", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var sessionId string

        resp, httpRes, err := apiClient.DefaultApi.RetrieveSession(context.Background(), sessionId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService UpdateConfiguration", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var sessionId string
        var configurationId string

        resp, httpRes, err := apiClient.DefaultApi.UpdateConfiguration(context.Background(), sessionId, configurationId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
