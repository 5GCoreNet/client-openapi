/*
CAPIF_Publish_Service_API

Testing DefaultApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package CAPIF_Publish_Service_API

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_CAPIF_Publish_Service_API_DefaultApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test DefaultApiService ApfIdServiceApisGet", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var apfId string

        resp, httpRes, err := apiClient.DefaultApi.ApfIdServiceApisGet(context.Background(), apfId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService ApfIdServiceApisPost", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var apfId string

        resp, httpRes, err := apiClient.DefaultApi.ApfIdServiceApisPost(context.Background(), apfId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService ApfIdServiceApisServiceApiIdDelete", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var serviceApiId string
        var apfId string

        resp, httpRes, err := apiClient.DefaultApi.ApfIdServiceApisServiceApiIdDelete(context.Background(), serviceApiId, apfId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService ApfIdServiceApisServiceApiIdGet", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var serviceApiId string
        var apfId string

        resp, httpRes, err := apiClient.DefaultApi.ApfIdServiceApisServiceApiIdGet(context.Background(), serviceApiId, apfId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService ApfIdServiceApisServiceApiIdPut", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var serviceApiId string
        var apfId string

        resp, httpRes, err := apiClient.DefaultApi.ApfIdServiceApisServiceApiIdPut(context.Background(), serviceApiId, apfId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
