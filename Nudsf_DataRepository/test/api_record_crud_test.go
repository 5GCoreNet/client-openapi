/*
Nudsf_DataRepository

Testing RecordCRUDApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package Nudsf_DataRepository

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_Nudsf_DataRepository_RecordCRUDApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test RecordCRUDApiService BulkDeleteRecords", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var realmId string
        var storageId string

        resp, httpRes, err := apiClient.RecordCRUDApi.BulkDeleteRecords(context.Background(), realmId, storageId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test RecordCRUDApiService CreateOrModifyRecord", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var realmId string
        var storageId string
        var recordId string

        resp, httpRes, err := apiClient.RecordCRUDApi.CreateOrModifyRecord(context.Background(), realmId, storageId, recordId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test RecordCRUDApiService DeleteRecord", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var realmId string
        var storageId string
        var recordId string

        resp, httpRes, err := apiClient.RecordCRUDApi.DeleteRecord(context.Background(), realmId, storageId, recordId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test RecordCRUDApiService GetMeta", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var realmId string
        var storageId string
        var recordId string

        resp, httpRes, err := apiClient.RecordCRUDApi.GetMeta(context.Background(), realmId, storageId, recordId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test RecordCRUDApiService GetRecord", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var realmId string
        var storageId string
        var recordId string

        resp, httpRes, err := apiClient.RecordCRUDApi.GetRecord(context.Background(), realmId, storageId, recordId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test RecordCRUDApiService SearchRecord", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var realmId string
        var storageId string

        resp, httpRes, err := apiClient.RecordCRUDApi.SearchRecord(context.Background(), realmId, storageId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test RecordCRUDApiService UpdateMeta", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var realmId string
        var storageId string
        var recordId string

        resp, httpRes, err := apiClient.RecordCRUDApi.UpdateMeta(context.Background(), realmId, storageId, recordId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
