/*
M5_NetworkAssistance

Testing DefaultApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package M5_NetworkAssistance

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_M5_NetworkAssistance_DefaultApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test DefaultApiService CreateNetworkAssistanceSession", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.DefaultApi.CreateNetworkAssistanceSession(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService DestroyNetworkAssistanceSession", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var naSessionId string

        resp, httpRes, err := apiClient.DefaultApi.DestroyNetworkAssistanceSession(context.Background(), naSessionId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService PatchNetworkAssistanceSession", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var naSessionId string

        resp, httpRes, err := apiClient.DefaultApi.PatchNetworkAssistanceSession(context.Background(), naSessionId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService RequestBitRateRecommendation", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var naSessionId string

        resp, httpRes, err := apiClient.DefaultApi.RequestBitRateRecommendation(context.Background(), naSessionId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService RequestDeliveryBoost", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var naSessionId string

        resp, httpRes, err := apiClient.DefaultApi.RequestDeliveryBoost(context.Background(), naSessionId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService RetrieveNetworkAssistanceSession", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var naSessionId string

        resp, httpRes, err := apiClient.DefaultApi.RetrieveNetworkAssistanceSession(context.Background(), naSessionId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService UpdateNetworkAssistanceSession", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var naSessionId string

        resp, httpRes, err := apiClient.DefaultApi.UpdateNetworkAssistanceSession(context.Background(), naSessionId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
