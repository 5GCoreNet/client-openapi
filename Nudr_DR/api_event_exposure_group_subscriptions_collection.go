/*
Nudr_DataRepository API OpenAPI file

Unified Data Repository Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 2.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nudr_DR

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


type EventExposureGroupSubscriptionsCollectionApi interface {

	/*
	CreateEeGroupSubscriptions Create individual EE subscription for a group of UEs or any UE

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param ueGroupId Group of UEs or any UE
	@return ApiCreateEeGroupSubscriptionsRequest
	*/
	CreateEeGroupSubscriptions(ctx context.Context, ueGroupId string) ApiCreateEeGroupSubscriptionsRequest

	// CreateEeGroupSubscriptionsExecute executes the request
	//  @return EeSubscription
	CreateEeGroupSubscriptionsExecute(r ApiCreateEeGroupSubscriptionsRequest) (*EeSubscription, *http.Response, error)

	/*
	QueryEeGroupSubscriptions Retrieves the ee subscriptions of a group of UEs or any UE

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param ueGroupId Group of UEs or any UE
	@return ApiQueryEeGroupSubscriptionsRequest
	*/
	QueryEeGroupSubscriptions(ctx context.Context, ueGroupId string) ApiQueryEeGroupSubscriptionsRequest

	// QueryEeGroupSubscriptionsExecute executes the request
	//  @return []EeSubscription
	QueryEeGroupSubscriptionsExecute(r ApiQueryEeGroupSubscriptionsRequest) ([]EeSubscription, *http.Response, error)
}

// EventExposureGroupSubscriptionsCollectionApiService EventExposureGroupSubscriptionsCollectionApi service
type EventExposureGroupSubscriptionsCollectionApiService service

type ApiCreateEeGroupSubscriptionsRequest struct {
	ctx context.Context
	ApiService EventExposureGroupSubscriptionsCollectionApi
	ueGroupId string
	eeSubscription *EeSubscription
}

func (r ApiCreateEeGroupSubscriptionsRequest) EeSubscription(eeSubscription EeSubscription) ApiCreateEeGroupSubscriptionsRequest {
	r.eeSubscription = &eeSubscription
	return r
}

func (r ApiCreateEeGroupSubscriptionsRequest) Execute() (*EeSubscription, *http.Response, error) {
	return r.ApiService.CreateEeGroupSubscriptionsExecute(r)
}

/*
CreateEeGroupSubscriptions Create individual EE subscription for a group of UEs or any UE

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ueGroupId Group of UEs or any UE
 @return ApiCreateEeGroupSubscriptionsRequest
*/
func (a *EventExposureGroupSubscriptionsCollectionApiService) CreateEeGroupSubscriptions(ctx context.Context, ueGroupId string) ApiCreateEeGroupSubscriptionsRequest {
	return ApiCreateEeGroupSubscriptionsRequest{
		ApiService: a,
		ctx: ctx,
		ueGroupId: ueGroupId,
	}
}

// Execute executes the request
//  @return EeSubscription
func (a *EventExposureGroupSubscriptionsCollectionApiService) CreateEeGroupSubscriptionsExecute(r ApiCreateEeGroupSubscriptionsRequest) (*EeSubscription, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EeSubscription
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventExposureGroupSubscriptionsCollectionApiService.CreateEeGroupSubscriptions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/subscription-data/group-data/{ueGroupId}/ee-subscriptions"
	localVarPath = strings.Replace(localVarPath, "{"+"ueGroupId"+"}", url.PathEscape(parameterToString(r.ueGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.eeSubscription == nil {
		return localVarReturnValue, nil, reportError("eeSubscription is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.eeSubscription
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiQueryEeGroupSubscriptionsRequest struct {
	ctx context.Context
	ApiService EventExposureGroupSubscriptionsCollectionApi
	ueGroupId string
	supportedFeatures *string
}

// Supported Features
func (r ApiQueryEeGroupSubscriptionsRequest) SupportedFeatures(supportedFeatures string) ApiQueryEeGroupSubscriptionsRequest {
	r.supportedFeatures = &supportedFeatures
	return r
}

func (r ApiQueryEeGroupSubscriptionsRequest) Execute() ([]EeSubscription, *http.Response, error) {
	return r.ApiService.QueryEeGroupSubscriptionsExecute(r)
}

/*
QueryEeGroupSubscriptions Retrieves the ee subscriptions of a group of UEs or any UE

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param ueGroupId Group of UEs or any UE
 @return ApiQueryEeGroupSubscriptionsRequest
*/
func (a *EventExposureGroupSubscriptionsCollectionApiService) QueryEeGroupSubscriptions(ctx context.Context, ueGroupId string) ApiQueryEeGroupSubscriptionsRequest {
	return ApiQueryEeGroupSubscriptionsRequest{
		ApiService: a,
		ctx: ctx,
		ueGroupId: ueGroupId,
	}
}

// Execute executes the request
//  @return []EeSubscription
func (a *EventExposureGroupSubscriptionsCollectionApiService) QueryEeGroupSubscriptionsExecute(r ApiQueryEeGroupSubscriptionsRequest) ([]EeSubscription, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []EeSubscription
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventExposureGroupSubscriptionsCollectionApiService.QueryEeGroupSubscriptions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/subscription-data/group-data/{ueGroupId}/ee-subscriptions"
	localVarPath = strings.Replace(localVarPath, "{"+"ueGroupId"+"}", url.PathEscape(parameterToString(r.ueGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.supportedFeatures != nil {
		localVarQueryParams.Add("supported-features", parameterToString(*r.supportedFeatures, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
