/*
Nhss_imsSDM

Nhss Subscriber Data Management Service for IMS.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nhss_imsSDM

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


type CSRNRetrievalApi interface {

	/*
	GetCsrn Retrieve the routeing number in CS domain

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param imsUeId IMS Public Identity
	@return ApiGetCsrnRequest
	*/
	GetCsrn(ctx context.Context, imsUeId string) ApiGetCsrnRequest

	// GetCsrnExecute executes the request
	//  @return Csrn
	GetCsrnExecute(r ApiGetCsrnRequest) (*Csrn, *http.Response, error)
}

// CSRNRetrievalApiService CSRNRetrievalApi service
type CSRNRetrievalApiService service

type ApiGetCsrnRequest struct {
	ctx context.Context
	ApiService CSRNRetrievalApi
	imsUeId string
	prePaging *bool
	supportedFeatures *string
	privateIdentity *string
	callReferenceInfo *CallReferenceInfo
}

// Indicates pre-paging support
func (r ApiGetCsrnRequest) PrePaging(prePaging bool) ApiGetCsrnRequest {
	r.prePaging = &prePaging
	return r
}

// Supported Features
func (r ApiGetCsrnRequest) SupportedFeatures(supportedFeatures string) ApiGetCsrnRequest {
	r.supportedFeatures = &supportedFeatures
	return r
}

// IMS Private Identity
func (r ApiGetCsrnRequest) PrivateIdentity(privateIdentity string) ApiGetCsrnRequest {
	r.privateIdentity = &privateIdentity
	return r
}

// Indicates Call-Reference Number and AS-Number
func (r ApiGetCsrnRequest) CallReferenceInfo(callReferenceInfo CallReferenceInfo) ApiGetCsrnRequest {
	r.callReferenceInfo = &callReferenceInfo
	return r
}

func (r ApiGetCsrnRequest) Execute() (*Csrn, *http.Response, error) {
	return r.ApiService.GetCsrnExecute(r)
}

/*
GetCsrn Retrieve the routeing number in CS domain

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param imsUeId IMS Public Identity
 @return ApiGetCsrnRequest
*/
func (a *CSRNRetrievalApiService) GetCsrn(ctx context.Context, imsUeId string) ApiGetCsrnRequest {
	return ApiGetCsrnRequest{
		ApiService: a,
		ctx: ctx,
		imsUeId: imsUeId,
	}
}

// Execute executes the request
//  @return Csrn
func (a *CSRNRetrievalApiService) GetCsrnExecute(r ApiGetCsrnRequest) (*Csrn, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Csrn
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CSRNRetrievalApiService.GetCsrn")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{imsUeId}/access-data/cs-domain/csrn"
	localVarPath = strings.Replace(localVarPath, "{"+"imsUeId"+"}", url.PathEscape(parameterToString(r.imsUeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.prePaging != nil {
		localVarQueryParams.Add("pre-paging", parameterToString(*r.prePaging, ""))
	}
	if r.supportedFeatures != nil {
		localVarQueryParams.Add("supported-features", parameterToString(*r.supportedFeatures, ""))
	}
	if r.privateIdentity != nil {
		localVarQueryParams.Add("private-identity", parameterToString(*r.privateIdentity, ""))
	}
	if r.callReferenceInfo != nil {
		localVarQueryParams.Add("call-reference-info", parameterToString(*r.callReferenceInfo, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 307 {
			var v RedirectResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 308 {
			var v RedirectResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
