/*
EES Session with QoS API

Testing DefaultApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package Eees_SessionWithQoS

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_Eees_SessionWithQoS_DefaultApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test DefaultApiService SessionsGet", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.DefaultApi.SessionsGet(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService SessionsPost", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.DefaultApi.SessionsPost(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService SessionsSessionIdDelete", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var sessionId string

        resp, httpRes, err := apiClient.DefaultApi.SessionsSessionIdDelete(context.Background(), sessionId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService SessionsSessionIdGet", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var sessionId string

        resp, httpRes, err := apiClient.DefaultApi.SessionsSessionIdGet(context.Background(), sessionId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService SessionsSessionIdPatch", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var sessionId string

        resp, httpRes, err := apiClient.DefaultApi.SessionsSessionIdPatch(context.Background(), sessionId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService SessionsSessionIdPut", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var sessionId string

        resp, httpRes, err := apiClient.DefaultApi.SessionsSessionIdPut(context.Background(), sessionId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
