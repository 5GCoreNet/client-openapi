/*
3gpp-nidd

Testing IndividualNIDDDownlinkDataDeliveryApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package NIDD

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_NIDD_IndividualNIDDDownlinkDataDeliveryApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test IndividualNIDDDownlinkDataDeliveryApiService DeleteIndDownlinkDataDelivery", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var scsAsId string
        var configurationId string
        var downlinkDataDeliveryId string

        resp, httpRes, err := apiClient.IndividualNIDDDownlinkDataDeliveryApi.DeleteIndDownlinkDataDelivery(context.Background(), scsAsId, configurationId, downlinkDataDeliveryId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test IndividualNIDDDownlinkDataDeliveryApiService FetchIndDownlinkDataDelivery", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var scsAsId string
        var configurationId string
        var downlinkDataDeliveryId string

        resp, httpRes, err := apiClient.IndividualNIDDDownlinkDataDeliveryApi.FetchIndDownlinkDataDelivery(context.Background(), scsAsId, configurationId, downlinkDataDeliveryId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test IndividualNIDDDownlinkDataDeliveryApiService ModifyIndDownlinkDataDelivery", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var scsAsId string
        var configurationId string
        var downlinkDataDeliveryId string

        resp, httpRes, err := apiClient.IndividualNIDDDownlinkDataDeliveryApi.ModifyIndDownlinkDataDelivery(context.Background(), scsAsId, configurationId, downlinkDataDeliveryId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test IndividualNIDDDownlinkDataDeliveryApiService UpdateIndDownlinkDataDelivery", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var scsAsId string
        var configurationId string
        var downlinkDataDeliveryId string

        resp, httpRes, err := apiClient.IndividualNIDDDownlinkDataDeliveryApi.UpdateIndDownlinkDataDelivery(context.Background(), scsAsId, configurationId, downlinkDataDeliveryId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
