/*
Namf_Communication

Testing IndividualUeContextDocumentApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package Namf_Communication

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_Namf_Communication_IndividualUeContextDocumentApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test IndividualUeContextDocumentApiService CancelRelocateUEContext", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var ueContextId string

        resp, httpRes, err := apiClient.IndividualUeContextDocumentApi.CancelRelocateUEContext(context.Background(), ueContextId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test IndividualUeContextDocumentApiService CreateUEContext", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var ueContextId string

        resp, httpRes, err := apiClient.IndividualUeContextDocumentApi.CreateUEContext(context.Background(), ueContextId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test IndividualUeContextDocumentApiService EBIAssignment", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var ueContextId string

        resp, httpRes, err := apiClient.IndividualUeContextDocumentApi.EBIAssignment(context.Background(), ueContextId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test IndividualUeContextDocumentApiService RegistrationStatusUpdate", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var ueContextId string

        resp, httpRes, err := apiClient.IndividualUeContextDocumentApi.RegistrationStatusUpdate(context.Background(), ueContextId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test IndividualUeContextDocumentApiService ReleaseUEContext", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var ueContextId string

        resp, httpRes, err := apiClient.IndividualUeContextDocumentApi.ReleaseUEContext(context.Background(), ueContextId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test IndividualUeContextDocumentApiService RelocateUEContext", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var ueContextId string

        resp, httpRes, err := apiClient.IndividualUeContextDocumentApi.RelocateUEContext(context.Background(), ueContextId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test IndividualUeContextDocumentApiService UEContextTransfer", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var ueContextId string

        resp, httpRes, err := apiClient.IndividualUeContextDocumentApi.UEContextTransfer(context.Background(), ueContextId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
