/*
Nadrf_DataManagement

ADRF Data Management Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_Nadrf_DataManagement

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


type ADRFDataStoreRecordsCollectionApi interface {

	/*
	CreateADRFDataStoreRecord Creates a new Individual Data Store Record resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateADRFDataStoreRecordRequest
	*/
	CreateADRFDataStoreRecord(ctx context.Context) ApiCreateADRFDataStoreRecordRequest

	// CreateADRFDataStoreRecordExecute executes the request
	//  @return NadrfDataStoreRecord
	CreateADRFDataStoreRecordExecute(r ApiCreateADRFDataStoreRecordRequest) (*NadrfDataStoreRecord, *http.Response, error)

	/*
	GetAdrfDataStoreRecords Retrieves existing Individual ADRF Data Store Records.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetAdrfDataStoreRecordsRequest
	*/
	GetAdrfDataStoreRecords(ctx context.Context) ApiGetAdrfDataStoreRecordsRequest

	// GetAdrfDataStoreRecordsExecute executes the request
	//  @return NadrfDataStoreRecord
	GetAdrfDataStoreRecordsExecute(r ApiGetAdrfDataStoreRecordsRequest) (*NadrfDataStoreRecord, *http.Response, error)
}

// ADRFDataStoreRecordsCollectionApiService ADRFDataStoreRecordsCollectionApi service
type ADRFDataStoreRecordsCollectionApiService service

type ApiCreateADRFDataStoreRecordRequest struct {
	ctx context.Context
	ApiService ADRFDataStoreRecordsCollectionApi
	nadrfDataStoreRecord *NadrfDataStoreRecord
}

// ADRF data store record to be stored.
func (r ApiCreateADRFDataStoreRecordRequest) NadrfDataStoreRecord(nadrfDataStoreRecord NadrfDataStoreRecord) ApiCreateADRFDataStoreRecordRequest {
	r.nadrfDataStoreRecord = &nadrfDataStoreRecord
	return r
}

func (r ApiCreateADRFDataStoreRecordRequest) Execute() (*NadrfDataStoreRecord, *http.Response, error) {
	return r.ApiService.CreateADRFDataStoreRecordExecute(r)
}

/*
CreateADRFDataStoreRecord Creates a new Individual Data Store Record resource.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateADRFDataStoreRecordRequest
*/
func (a *ADRFDataStoreRecordsCollectionApiService) CreateADRFDataStoreRecord(ctx context.Context) ApiCreateADRFDataStoreRecordRequest {
	return ApiCreateADRFDataStoreRecordRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return NadrfDataStoreRecord
func (a *ADRFDataStoreRecordsCollectionApiService) CreateADRFDataStoreRecordExecute(r ApiCreateADRFDataStoreRecordRequest) (*NadrfDataStoreRecord, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NadrfDataStoreRecord
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ADRFDataStoreRecordsCollectionApiService.CreateADRFDataStoreRecord")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/data-store-records"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.nadrfDataStoreRecord == nil {
		return localVarReturnValue, nil, reportError("nadrfDataStoreRecord is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.nadrfDataStoreRecord
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 411 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 413 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 415 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAdrfDataStoreRecordsRequest struct {
	ctx context.Context
	ApiService ADRFDataStoreRecordsCollectionApi
	storeTransId *string
	fetchCorrelationIds *[]string
	anaSub *NnwdafEventsSubscription
	amfDataSub *AmfEventSubscription
	smfDataSub *NsmfEventExposure
	nefDataSub *NefEventExposureSubsc
	udmDataSub *EeSubscription
	afDataSub *AfEventExposureSubsc
	timePeriod *TimeWindow
}

// A storage transaction identifier of a data store record in ADRF.
func (r ApiGetAdrfDataStoreRecordsRequest) StoreTransId(storeTransId string) ApiGetAdrfDataStoreRecordsRequest {
	r.storeTransId = &storeTransId
	return r
}

// Fetch correlation identifiers received as part of fetch instruction.
func (r ApiGetAdrfDataStoreRecordsRequest) FetchCorrelationIds(fetchCorrelationIds []string) ApiGetAdrfDataStoreRecordsRequest {
	r.fetchCorrelationIds = &fetchCorrelationIds
	return r
}

// Represents analytics event subscription.
func (r ApiGetAdrfDataStoreRecordsRequest) AnaSub(anaSub NnwdafEventsSubscription) ApiGetAdrfDataStoreRecordsRequest {
	r.anaSub = &anaSub
	return r
}

// Represents AMF event subscription.
func (r ApiGetAdrfDataStoreRecordsRequest) AmfDataSub(amfDataSub AmfEventSubscription) ApiGetAdrfDataStoreRecordsRequest {
	r.amfDataSub = &amfDataSub
	return r
}

// Represents SMF event subscription.
func (r ApiGetAdrfDataStoreRecordsRequest) SmfDataSub(smfDataSub NsmfEventExposure) ApiGetAdrfDataStoreRecordsRequest {
	r.smfDataSub = &smfDataSub
	return r
}

// Represents NEF event subscription.
func (r ApiGetAdrfDataStoreRecordsRequest) NefDataSub(nefDataSub NefEventExposureSubsc) ApiGetAdrfDataStoreRecordsRequest {
	r.nefDataSub = &nefDataSub
	return r
}

// Represents UDM event subscription.
func (r ApiGetAdrfDataStoreRecordsRequest) UdmDataSub(udmDataSub EeSubscription) ApiGetAdrfDataStoreRecordsRequest {
	r.udmDataSub = &udmDataSub
	return r
}

// Represents AF event subscription.
func (r ApiGetAdrfDataStoreRecordsRequest) AfDataSub(afDataSub AfEventExposureSubsc) ApiGetAdrfDataStoreRecordsRequest {
	r.afDataSub = &afDataSub
	return r
}

// Represents a start time and a stop time during which requested data is collected  or to be collected. 
func (r ApiGetAdrfDataStoreRecordsRequest) TimePeriod(timePeriod TimeWindow) ApiGetAdrfDataStoreRecordsRequest {
	r.timePeriod = &timePeriod
	return r
}

func (r ApiGetAdrfDataStoreRecordsRequest) Execute() (*NadrfDataStoreRecord, *http.Response, error) {
	return r.ApiService.GetAdrfDataStoreRecordsExecute(r)
}

/*
GetAdrfDataStoreRecords Retrieves existing Individual ADRF Data Store Records.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAdrfDataStoreRecordsRequest
*/
func (a *ADRFDataStoreRecordsCollectionApiService) GetAdrfDataStoreRecords(ctx context.Context) ApiGetAdrfDataStoreRecordsRequest {
	return ApiGetAdrfDataStoreRecordsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return NadrfDataStoreRecord
func (a *ADRFDataStoreRecordsCollectionApiService) GetAdrfDataStoreRecordsExecute(r ApiGetAdrfDataStoreRecordsRequest) (*NadrfDataStoreRecord, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NadrfDataStoreRecord
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ADRFDataStoreRecordsCollectionApiService.GetAdrfDataStoreRecords")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/data-store-records"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.storeTransId != nil {
		localVarQueryParams.Add("store-trans-id", parameterToString(*r.storeTransId, ""))
	}
	if r.fetchCorrelationIds != nil {
		localVarQueryParams.Add("fetch-correlation-ids", parameterToString(*r.fetchCorrelationIds, "csv"))
	}
	if r.anaSub != nil {
		localVarQueryParams.Add("ana-sub", parameterToString(*r.anaSub, ""))
	}
	if r.amfDataSub != nil {
		localVarQueryParams.Add("amf-data-sub", parameterToString(*r.amfDataSub, ""))
	}
	if r.smfDataSub != nil {
		localVarQueryParams.Add("smf-data-sub", parameterToString(*r.smfDataSub, ""))
	}
	if r.nefDataSub != nil {
		localVarQueryParams.Add("nef-data-sub", parameterToString(*r.nefDataSub, ""))
	}
	if r.udmDataSub != nil {
		localVarQueryParams.Add("udm-data-sub", parameterToString(*r.udmDataSub, ""))
	}
	if r.afDataSub != nil {
		localVarQueryParams.Add("af-data-sub", parameterToString(*r.afDataSub, ""))
	}
	if r.timePeriod != nil {
		localVarQueryParams.Add("time-period", parameterToString(*r.timePeriod, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
