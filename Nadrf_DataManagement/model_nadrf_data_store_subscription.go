/*
Nadrf_DataManagement

ADRF Data Management Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 

API version: 1.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Nadrf_DataManagement

import (
	"encoding/json"
)

// NadrfDataStoreSubscription Contains information to be used by the ADRF to create a Data or Analytics subscription. 
type NadrfDataStoreSubscription struct {
	AnaSub *NnwdafEventsSubscription `json:"anaSub,omitempty"`
	DataSub *DataSubscription `json:"dataSub,omitempty"`
	// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.  
	TargetNfId *string `json:"targetNfId,omitempty"`
	// NF Set Identifier (see clause 28.12 of 3GPP TS 23.003), formatted as the following string \"set<Set ID>.<nftype>set.5gc.mnc<MNC>.mcc<MCC>\", or  \"set<SetID>.<NFType>set.5gc.nid<NID>.mnc<MNC>.mcc<MCC>\" with  <MCC> encoded as defined in clause 5.4.2 (\"Mcc\" data type definition)  <MNC> encoding the Mobile Network Code part of the PLMN, comprising 3 digits.    If there are only 2 significant digits in the MNC, one \"0\" digit shall be inserted    at the left side to fill the 3 digits coding of MNC.  Pattern: '^[0-9]{3}$' <NFType> encoded as a value defined in Table 6.1.6.3.3-1 of 3GPP TS 29.510 but    with lower case characters <Set ID> encoded as a string of characters consisting of    alphabetic characters (A-Z and a-z), digits (0-9) and/or the hyphen (-) and that    shall end with either an alphabetic character or a digit.  
	TargetNfSetId *string `json:"targetNfSetId,omitempty"`
	FormatInstruct *FormattingInstruction `json:"formatInstruct,omitempty"`
	ProcInstruct *ProcessingInstruction `json:"procInstruct,omitempty"`
}

// NewNadrfDataStoreSubscription instantiates a new NadrfDataStoreSubscription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNadrfDataStoreSubscription() *NadrfDataStoreSubscription {
	this := NadrfDataStoreSubscription{}
	return &this
}

// NewNadrfDataStoreSubscriptionWithDefaults instantiates a new NadrfDataStoreSubscription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNadrfDataStoreSubscriptionWithDefaults() *NadrfDataStoreSubscription {
	this := NadrfDataStoreSubscription{}
	return &this
}

// GetAnaSub returns the AnaSub field value if set, zero value otherwise.
func (o *NadrfDataStoreSubscription) GetAnaSub() NnwdafEventsSubscription {
	if o == nil || isNil(o.AnaSub) {
		var ret NnwdafEventsSubscription
		return ret
	}
	return *o.AnaSub
}

// GetAnaSubOk returns a tuple with the AnaSub field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NadrfDataStoreSubscription) GetAnaSubOk() (*NnwdafEventsSubscription, bool) {
	if o == nil || isNil(o.AnaSub) {
    return nil, false
	}
	return o.AnaSub, true
}

// HasAnaSub returns a boolean if a field has been set.
func (o *NadrfDataStoreSubscription) HasAnaSub() bool {
	if o != nil && !isNil(o.AnaSub) {
		return true
	}

	return false
}

// SetAnaSub gets a reference to the given NnwdafEventsSubscription and assigns it to the AnaSub field.
func (o *NadrfDataStoreSubscription) SetAnaSub(v NnwdafEventsSubscription) {
	o.AnaSub = &v
}

// GetDataSub returns the DataSub field value if set, zero value otherwise.
func (o *NadrfDataStoreSubscription) GetDataSub() DataSubscription {
	if o == nil || isNil(o.DataSub) {
		var ret DataSubscription
		return ret
	}
	return *o.DataSub
}

// GetDataSubOk returns a tuple with the DataSub field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NadrfDataStoreSubscription) GetDataSubOk() (*DataSubscription, bool) {
	if o == nil || isNil(o.DataSub) {
    return nil, false
	}
	return o.DataSub, true
}

// HasDataSub returns a boolean if a field has been set.
func (o *NadrfDataStoreSubscription) HasDataSub() bool {
	if o != nil && !isNil(o.DataSub) {
		return true
	}

	return false
}

// SetDataSub gets a reference to the given DataSubscription and assigns it to the DataSub field.
func (o *NadrfDataStoreSubscription) SetDataSub(v DataSubscription) {
	o.DataSub = &v
}

// GetTargetNfId returns the TargetNfId field value if set, zero value otherwise.
func (o *NadrfDataStoreSubscription) GetTargetNfId() string {
	if o == nil || isNil(o.TargetNfId) {
		var ret string
		return ret
	}
	return *o.TargetNfId
}

// GetTargetNfIdOk returns a tuple with the TargetNfId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NadrfDataStoreSubscription) GetTargetNfIdOk() (*string, bool) {
	if o == nil || isNil(o.TargetNfId) {
    return nil, false
	}
	return o.TargetNfId, true
}

// HasTargetNfId returns a boolean if a field has been set.
func (o *NadrfDataStoreSubscription) HasTargetNfId() bool {
	if o != nil && !isNil(o.TargetNfId) {
		return true
	}

	return false
}

// SetTargetNfId gets a reference to the given string and assigns it to the TargetNfId field.
func (o *NadrfDataStoreSubscription) SetTargetNfId(v string) {
	o.TargetNfId = &v
}

// GetTargetNfSetId returns the TargetNfSetId field value if set, zero value otherwise.
func (o *NadrfDataStoreSubscription) GetTargetNfSetId() string {
	if o == nil || isNil(o.TargetNfSetId) {
		var ret string
		return ret
	}
	return *o.TargetNfSetId
}

// GetTargetNfSetIdOk returns a tuple with the TargetNfSetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NadrfDataStoreSubscription) GetTargetNfSetIdOk() (*string, bool) {
	if o == nil || isNil(o.TargetNfSetId) {
    return nil, false
	}
	return o.TargetNfSetId, true
}

// HasTargetNfSetId returns a boolean if a field has been set.
func (o *NadrfDataStoreSubscription) HasTargetNfSetId() bool {
	if o != nil && !isNil(o.TargetNfSetId) {
		return true
	}

	return false
}

// SetTargetNfSetId gets a reference to the given string and assigns it to the TargetNfSetId field.
func (o *NadrfDataStoreSubscription) SetTargetNfSetId(v string) {
	o.TargetNfSetId = &v
}

// GetFormatInstruct returns the FormatInstruct field value if set, zero value otherwise.
func (o *NadrfDataStoreSubscription) GetFormatInstruct() FormattingInstruction {
	if o == nil || isNil(o.FormatInstruct) {
		var ret FormattingInstruction
		return ret
	}
	return *o.FormatInstruct
}

// GetFormatInstructOk returns a tuple with the FormatInstruct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NadrfDataStoreSubscription) GetFormatInstructOk() (*FormattingInstruction, bool) {
	if o == nil || isNil(o.FormatInstruct) {
    return nil, false
	}
	return o.FormatInstruct, true
}

// HasFormatInstruct returns a boolean if a field has been set.
func (o *NadrfDataStoreSubscription) HasFormatInstruct() bool {
	if o != nil && !isNil(o.FormatInstruct) {
		return true
	}

	return false
}

// SetFormatInstruct gets a reference to the given FormattingInstruction and assigns it to the FormatInstruct field.
func (o *NadrfDataStoreSubscription) SetFormatInstruct(v FormattingInstruction) {
	o.FormatInstruct = &v
}

// GetProcInstruct returns the ProcInstruct field value if set, zero value otherwise.
func (o *NadrfDataStoreSubscription) GetProcInstruct() ProcessingInstruction {
	if o == nil || isNil(o.ProcInstruct) {
		var ret ProcessingInstruction
		return ret
	}
	return *o.ProcInstruct
}

// GetProcInstructOk returns a tuple with the ProcInstruct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NadrfDataStoreSubscription) GetProcInstructOk() (*ProcessingInstruction, bool) {
	if o == nil || isNil(o.ProcInstruct) {
    return nil, false
	}
	return o.ProcInstruct, true
}

// HasProcInstruct returns a boolean if a field has been set.
func (o *NadrfDataStoreSubscription) HasProcInstruct() bool {
	if o != nil && !isNil(o.ProcInstruct) {
		return true
	}

	return false
}

// SetProcInstruct gets a reference to the given ProcessingInstruction and assigns it to the ProcInstruct field.
func (o *NadrfDataStoreSubscription) SetProcInstruct(v ProcessingInstruction) {
	o.ProcInstruct = &v
}

func (o NadrfDataStoreSubscription) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AnaSub) {
		toSerialize["anaSub"] = o.AnaSub
	}
	if !isNil(o.DataSub) {
		toSerialize["dataSub"] = o.DataSub
	}
	if !isNil(o.TargetNfId) {
		toSerialize["targetNfId"] = o.TargetNfId
	}
	if !isNil(o.TargetNfSetId) {
		toSerialize["targetNfSetId"] = o.TargetNfSetId
	}
	if !isNil(o.FormatInstruct) {
		toSerialize["formatInstruct"] = o.FormatInstruct
	}
	if !isNil(o.ProcInstruct) {
		toSerialize["procInstruct"] = o.ProcInstruct
	}
	return json.Marshal(toSerialize)
}

type NullableNadrfDataStoreSubscription struct {
	value *NadrfDataStoreSubscription
	isSet bool
}

func (v NullableNadrfDataStoreSubscription) Get() *NadrfDataStoreSubscription {
	return v.value
}

func (v *NullableNadrfDataStoreSubscription) Set(val *NadrfDataStoreSubscription) {
	v.value = val
	v.isSet = true
}

func (v NullableNadrfDataStoreSubscription) IsSet() bool {
	return v.isSet
}

func (v *NullableNadrfDataStoreSubscription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNadrfDataStoreSubscription(val *NadrfDataStoreSubscription) *NullableNadrfDataStoreSubscription {
	return &NullableNadrfDataStoreSubscription{value: val, isSet: true}
}

func (v NullableNadrfDataStoreSubscription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNadrfDataStoreSubscription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


