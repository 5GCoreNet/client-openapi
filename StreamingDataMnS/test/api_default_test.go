/*
TS 28.532 Streaming data reporting service

Testing DefaultApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package StreamingDataMnS

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_StreamingDataMnS_DefaultApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test DefaultApiService ConnectionsConnectionIdGet", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var connectionId string

        resp, httpRes, err := apiClient.DefaultApi.ConnectionsConnectionIdGet(context.Background(), connectionId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService ConnectionsConnectionIdStreamsDelete", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var connectionId string

        resp, httpRes, err := apiClient.DefaultApi.ConnectionsConnectionIdStreamsDelete(context.Background(), connectionId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService ConnectionsConnectionIdStreamsGet", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var connectionId string

        resp, httpRes, err := apiClient.DefaultApi.ConnectionsConnectionIdStreamsGet(context.Background(), connectionId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService ConnectionsConnectionIdStreamsPost", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var connectionId string

        resp, httpRes, err := apiClient.DefaultApi.ConnectionsConnectionIdStreamsPost(context.Background(), connectionId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService ConnectionsConnectionIdStreamsStreamIdGet", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var connectionId string
        var streamId string

        resp, httpRes, err := apiClient.DefaultApi.ConnectionsConnectionIdStreamsStreamIdGet(context.Background(), connectionId, streamId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService ConnectionsGet", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.DefaultApi.ConnectionsGet(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DefaultApiService ConnectionsPost", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.DefaultApi.ConnectionsPost(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
